<%- include("../layouts/admin_layouts/admin_header.ejs") -%>

<div class="screen-overlay"></div>

<%- include("../layouts/admin_layouts/admin_asidenav.ejs") -%>

<main class="main-wrap">

  <%- include("../layouts/admin_layouts/admin_topnav.ejs") -%>





  <section class="content-main">

    <!-- Div to display total sales stats -->
    <div id="sales-stats" class="card p-4 mb-4 shadow-sm">
      <h4 class="card-title text-center mb-3">Total Sales Summary</h4>
      <div class="row">
        <div class="col-md-4 mb-3">
          <p class="mb-1"><strong>Total Sales Count: </strong><span id="total-sales-count" class="badge bg-primary">
              <%= totalSalesCount %>
            </span></p>
        </div>
        <div class="col-md-4 mb-3">
          <p class="mb-1"><strong>Total Orders Amount: </strong><span id="total-orders-amount" class="badge bg-success"> ₹ <%= totalOrdersAmount %> </span></p>
        </div>
        <div class="col-md-4 mb-3">
          <p class="mb-1"><strong>Total Discount Amount: </strong><span id="total-discount-amount" class="badge bg-warning"> ₹ <%= totalDiscountAmount %> </span></p>
        </div>
      </div>
    </div>





    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Transactions List</h2>
      </div>
      <div class="export-buttons  d-flex justify-content-end ">
        <button class="btn btn-primary mr-5" onclick="exportToExcel()">Export to Excel</button>
        <button class="btn btn-primary" onclick="exportToPDF()">Export to PDF</button>

      </div>
    </div>



    <div class="card-body border border-dark p-3 " style="background-color: hsla(212, 91%, 49%, 0.24);">

      <div class="filters d-flex justify-content-between gap-3">

        <div class="date-filters mt-3 ">
          <button id="filter-reset" class="filter-btn">All</button>
          <button id="filter-last-hour" class="filter-btn">Last Hour</button>
          <button id="filter-today" class="filter-btn">Today</button>
          <button id="filter-week" class="filter-btn">This Week</button>
          <button id="filter-month" class="filter-btn">This Month</button>
        </div>

        <div class="custom-date-filter   justify-content-end ">
          <label for="start-date">Start Date: </label>
          <input type="date" id="start-date" class="filter-btn">
          <label for="end-date">End Date: </label>
          <input type="date" id="end-date" class="filter-btn"> <br>
          <button id="filter-custom-range" class="btn btn-primary mt-5">Apply Custom Date Range</button>
          <button id="filter-reset-custom" class="btn btn-secondary mt-5">Reset Filter</button>

        </div>

      </div>

      <div id="pdf-content">

        <div class="table-responsive">
          <div class="table-responsive">
            <table class="table align-middle table-nowrap mb-0" id="transactions">
              <thead class="table-dark">
                <tr>

                  <th class="align-middle" scope="col">Sl. No.</th>
                  <th class="align-middle" scope="col">Order ID</th>
                  <th class="align-middle" scope="col">Billing Name</th>
                  <th class="align-middle" scope="col">Date</th>
                  <th class="align-middle" scope="col">Order Amount</th>
                  <th class="align-middle" scope="col">Discount %</th>
                  <th class="align-middle" scope="col">Total</th>
                  <th class="align-middle" scope="col">Payment Status</th>
                  <th class="align-middle" scope="col">Payment Method</th>
                  <th class="align-middle" scope="col">View Details</th>
                </tr>
              </thead>
              <tbody>
                <% if(ordersData && ordersData.length> 0 ) { %>
                <% for(let i=0 ; i < ordersData.length ; i++){ %>
                <tr>
                  <td> <%= i+1 %> </td>
                  <td><a class="fw-bold">
                      <%= ordersData[i].orderid %>
                    </a> </td>
                  <td>
                    <%= ordersData[i].address.firstName %>
                    <%= ordersData[i].address.lastName %>
                  </td>
                  <td>
                    <%= ordersData[i].orderDate.toLocaleString('en-US') %>
                  </td>

                  <td class="fw-bold text-secondary " style="font-size: 1.2em;">
                    ₹<%= ordersData[i].totalSum %>
                  </td>
                  <td class="fw-bold text-danger " style="font-size: 1.2em;">
                    -<%= ordersData[i].discountPercentage %>%
                  </td>

                  <td class="fw-bold text-success " style="font-size: 1.2em;">
                    ₹<%= ordersData[i].totalPrice %>
                  </td>



                  <td>
                    <span class="fw-bold badge badge-pill badge-soft-primary">
                      <%= ordersData[i].paymentStatus %>
                    </span>
                  </td>
                  <td>
                    <i class="material-icons md-payment font-xxl text-muted mr-5">
                    </i>
                    <%= ordersData[i].paymentMethod %>
                  </td>
                  <td>
                    <a href="/admin/admin_individual_order_page?ordersIndividualId=<%= ordersData[i]._id %>" class="btn btn-md rounded font-sm">Order Details</a>
                  </td>
                </tr>
                <% } %>
                <% } %>

              </tbody>
            </table>
          </div>
        </div>

      </div>

    </div>

  </section>



  <!-- Moment.js (for date parsing) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

  <!-- jQuery and DataTables -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

  <!-- Libraries for Excel and PDF export -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.1/xlsx.full.min.js"></script>

  <!-- jsPDF library -->
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.6.0/dist/jspdf.umd.min.js"></script>

  <!-- jsPDF Autotable plugin -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.16/jspdf.plugin.autotable.min.js"></script>

  <!-- html2pdf -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>



  <script>
    // Table Contents

    let table; // Declare globally



    // Excel Export function
    function exportToExcel() {
      console.log("Exporting to Excel...");
      if (window.jspdf) {
        console.log("EXCEL : jsPDF is loaded!");
      } else {
        console.log("EXCEL : jsPDF is not loaded!");
      }

      // Get only the visible rows after the filter is applied
      const visibleRows = table.rows({
        filter: 'applied'
      }).data().toArray();

      // Create a new workbook with the filtered data
      const wb = XLSX.utils.book_new();

      // Prepare the headers (excluding 'View Details' column)
      const headers = ['Order ID', 'Billing Name', 'Date', 'Order Amount', 'Discount %', 'Total', 'Payment Status', 'Payment Method'];

      // Helper function to clean HTML tags from a string
      function stripHtml(html) {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        return doc.body.textContent || "";
      }

      // Clean the data by stripping HTML tags and removing empty cells
      const cleanedRows = visibleRows.map(row => {
        // Remove the last column (View Details)
        row.pop();

        // Clean HTML tags and filter out empty strings
        return row.map(cell => {
          const cleanedCell = stripHtml(cell).trim();
          return cleanedCell ? cleanedCell : null; // Filter out empty strings
        }).filter(cell => cell !== null); // Remove null (empty) values
      });

      // Add the filtered data with headers
      const ws = XLSX.utils.aoa_to_sheet([headers, ...cleanedRows]);

      // Append the sheet to the workbook
      XLSX.utils.book_append_sheet(wb, ws, "Filtered Data");

      // Save the workbook
      XLSX.writeFile(wb, 'filtered_transactions.xlsx');
    }



    // PDF Export function
    function exportToPDF() {
      console.log("Exporting to PDF...");

      // Show all data in the table by temporarily disabling pagination
      table.page.len(-1).draw();

      const element = document.getElementById('pdf-content');
      const options = {
        margin: 0.5,
        filename: 'transactions.pdf',
        image: {
          type: 'jpeg',
          quality: 0.98
        },
        html2canvas: {
          scale: 2,
          useCORS: true,
          scrollX: 0,
          scrollY: 0
        },
        jsPDF: {
          unit: 'in',
          format: 'a4',
          orientation: 'portrait'
        }
      };

      html2pdf().set(options).from(element).toPdf().get('pdf').then(function(pdf) {
        const totalPages = pdf.internal.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
          pdf.setPage(i);
          pdf.setFontSize(10);
          pdf.text('Page ' + i + ' of ' + totalPages, pdf.internal.pageSize.width - 1, pdf.internal.pageSize.height - 0.5);
        }
      }).save().finally(() => {
        // Restore original pagination settings after export
        table.page.len(10).draw();
      });
    }



    $(document).ready(function() {
      table = new DataTable('#transactions', {
        "order": [
          [3, 'desc']
        ],
        "columnDefs": [{
          "targets": [3],
          "type": "date"
        }]
      });


      // Function to filter table rows by date range
      function filterByDateRange(startDate, endDate) {
        // Clear previous filter if exists
        $.fn.dataTable.ext.search.pop();

        // Add new filter function
        $.fn.dataTable.ext.search.push(function(settings, data) {
          const dateStr = data[3]; // Date column index
          const rowDate = moment(dateStr, 'MM/DD/YYYY, h:mm:ss A'); // Adjust format as needed

          // Check if date falls within the range
          return rowDate.isBetween(startDate, endDate, null, '[]'); // inclusive range
        });

        // Redraw table to apply filter and update pagination
        table.draw();
      }

      // Function to reset filter and remove inline active styles
      function resetFilter() {
        $.fn.dataTable.ext.search.pop(); // Remove custom filter
        table.draw(); // Redraw table to show all data
        // Remove active styles from all filter buttons
        $('.filter-btn').css({
          'background-color': '',
          'color': '' // Reset colors
        });
      }


      // Event listeners for filter buttons

      //custom date range
      $('#filter-custom-range').on('click', function() {
        const startDate = $('#start-date').val();
        const endDate = $('#end-date').val();

        if (startDate && endDate) {
          const startMoment = moment(startDate);
          const endMoment = moment(endDate);

          // Apply the custom date range filter
          filterByDateRange(startMoment, endMoment);
        } else {
          alert('Please select both start and end date');
        }
      });

      // Reset Filter Button
      $('#filter-reset-custom').on('click', function() {
        // Reset the date inputs
        $('#start-date').val('');
        $('#end-date').val('');

        // Reset the table filter
        $.fn.dataTable.ext.search.pop(); // Remove custom filter
        table.draw(); // Redraw table to show all data
      });


      // hour
      $('#filter-last-hour').on('click', function() {
        // Reset filter and apply active style
        resetFilter();
        $(this).css({
          'background-color': '#007bff', // Highlight color
          'color': 'white' // Text color when active
        });

        const lastHourStart = moment().subtract(1, 'hour'); // One hour ago
        const lastHourEnd = moment(); // Current time
        filterByDateRange(lastHourStart, lastHourEnd);
      });
      // day
      $('#filter-today').on('click', function() {
        // Reset filter and apply active style
        resetFilter();
        $(this).css({
          'background-color': '#007bff', // Highlight color
          'color': 'white' // Text color when active
        });

        const todayStart = moment().startOf('day');
        const todayEnd = moment().endOf('day');
        filterByDateRange(todayStart, todayEnd);
      });
      // week
      $('#filter-week').on('click', function() {
        // Reset filter and apply active style
        resetFilter();
        $(this).css({
          'background-color': '#007bff', // Highlight color
          'color': 'white' // Text color when active
        });

        const startOfWeek = moment().startOf('week');
        const endOfWeek = moment().endOf('week');
        filterByDateRange(startOfWeek, endOfWeek);
      });
      // month
      $('#filter-month').on('click', function() {
        // Reset filter and apply active style
        resetFilter();
        $(this).css({
          'background-color': '#007bff', // Highlight color
          'color': 'white' // Text color when active
        });

        const startOfMonth = moment().startOf('month');
        const endOfMonth = moment().endOf('month');
        filterByDateRange(startOfMonth, endOfMonth);
      });

      // Reset filter to show all rows
      $('#filter-reset').on('click', function() {
        // Reset filter and apply active style
        resetFilter();
        $(this).css({
          'background-color': '#007bff', // Highlight color
          'color': 'white' // Text color when active
        });
      });


      // Event listeners for export buttons
      $('#export-excel').on('click', function() {
        exportToExcel();
      });

      $('#export-pdf').on('click', function() {
        exportToPDF();
      });
    });
  </script>





  <% - include("../layouts/admin_layouts/admin_footer.ejs") -%>