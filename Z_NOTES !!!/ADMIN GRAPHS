<div class="card mb-4">



<article class="card-body">
  <h3 class="card-title">Sale statistics</h3>
  <h5 id="salesStatistics">Current Year Chart Data </h5>

  <!-- <canvas id="myChart" height="120px"></canvas> -->

  <canvas id="monthlyChart" width="600" height="400"></canvas>
  <canvas id="currentMonthChart" width="600" height="400" style="display: none;"></canvas>

  <canvas id="weeklyChart" width="600" height="400" style="display: none;"></canvas>
</article>

<div style="padding: 10px; margin-left: 10px;">
  <button class="btn" onclick="showMonthlyChart()" style="color: #088178; border: 1px solid #088178; padding: 5px; margin: 10px ;">
    Current Year</button>
  <button class="btn" onclick="showCurrentMonthChart()" style="color: #088178; border: 1px solid #088178; padding: 5px; margin: 10px ;">
    Current Month</button>
  <button class="btn" onclick="showWeeklyChart()" style="color: #088178; border: 1px solid #088178; padding: 5px;">
    Week</button>
</div>





</div>

  <script>
    function showMonthlyChart() {
      const monthlyChart = document.getElementById('monthlyChart');
      const currentMonthChart = document.getElementById('currentMonthChart');
      const weeklyChart = document.getElementById('weeklyChart');
      const salesStatistics = document.getElementById('salesStatistics');

      monthlyChart.style.display = 'block';
      currentMonthChart.style.display = 'none';
      weeklyChart.style.display = 'none';
      salesStatistics.innerText = "Current Year Chart Data"
    }

    function showCurrentMonthChart() {
      const monthlyChart = document.getElementById('monthlyChart');
      const currentMonthChart = document.getElementById('currentMonthChart');
      const weeklyChart = document.getElementById('weeklyChart');
      const salesStatistics = document.getElementById('salesStatistics');

      monthlyChart.style.display = 'none';
      currentMonthChart.style.display = 'block';
      weeklyChart.style.display = 'none';
      salesStatistics.innerText = "Current Month Chart Data"
    }

    function showWeeklyChart() {
      const monthlyChart = document.getElementById('monthlyChart');
      const currentMonthChart = document.getElementById('currentMonthChart');
      const weeklyChart = document.getElementById('weeklyChart');
      const salesStatistics = document.getElementById('salesStatistics');

      monthlyChart.style.display = 'none';
      currentMonthChart.style.display = 'none';
      weeklyChart.style.display = 'block';
      salesStatistics.innerText = "Current Week Chart Data"
    }
  </script>

  // weekly data
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Fetch weekly data
      fetch('/admin/admin_weekly_data')
        .then(response => response.json())
        .then(data => {
          console.log("admin_weekly_data recieved");

          var weeklyOrderData = data.weeklyOrderData || [];
          var weeklyUserData = data.weeklyUserData || [];

          // Extract data from the fetched JSON
          var orderLabels = weeklyOrderData.map(order => getDayName(order._id));
          var orderData = weeklyOrderData.map(order => order.totalWeeklyPrice);

          var userLabels = [' '];
          var userData = weeklyUserData.length > 0 ? weeklyUserData.map(user => user.userCount) : [];

          var ctx = document.getElementById('weeklyChart').getContext('2d');
          var chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: orderLabels.concat(userLabels),
              datasets: [{
                  label: 'Weekly Order Data',
                  data: orderData,
                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
                },
                {
                  label: 'Weekly User Data',
                  data: userData,
                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255, 99, 132, 1)',
                  borderWidth: 1
                }
              ]
            },
            options: {
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          });
        })
        .catch(error => console.error('Error fetching data:', error));

      // Function to get day name based on day number
      function getDayName(dayNumber) {
        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

        return dayNames[dayNumber - 1] || 'Unknown';
      }
    });
  </script>

  // monthly data
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      fetch('/admin/admin_monthly_data')
        .then(response => response.json())
        .then(data => {
          var monthlyOrderData = data.monthlyOrderData || [];
          var monthlyUserData = data.monthlyUserData || [];

          // Extract data from the fetched JSON
          var orderLabels = monthlyOrderData.map(order => getMonthName(order._id));
          var orderData = monthlyOrderData.map(order => order.totalMonthlyPrice);

          var userLabels = [' '];
          var userData = monthlyUserData.length > 0 ? monthlyUserData.map(user => user.userCount) : [];

          var ctx = document.getElementById('monthlyChart').getContext('2d');
          var chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: orderLabels.concat(userLabels),
              datasets: [{
                  label: 'Monthly Order Data',
                  data: orderData,
                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
                },
                {
                  label: 'Monthly User Data',
                  data: userData,
                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255, 99, 132, 1)',
                  borderWidth: 1
                }
              ]
            },
            options: {
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          });
        })
        .catch(error => console.error('Error fetching data:', error));

      // Function to get month name based on month number
      function getMonthName(monthNumber) {
        const monthNames = [
          'January', 'February', 'March', 'April',
          'May', 'June', 'July', 'August',
          'September', 'October', 'November', 'December'
        ];

        return monthNames[monthNumber - 1] || 'Unknown';
      }
    });
  </script>


  // current month
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Fetch current month data
      fetch('/admin/admin_current_month_data')
        .then(response => response.json())
        .then(data => {
          console.log("admin_current_month_data received");

          var dailyOrderData = data.dailyOrderData || [];
          var dailyUserData = data.dailyUserData || [];

          // Extract data from the fetched JSON
          var orderLabels = dailyOrderData.map(order => `Day ${order._id}`);
          var orderData = dailyOrderData.map(order => order.totalDailyPrice);

          var userLabels = [' '];
          var userData = dailyUserData.length > 0 ? dailyUserData.map(user => user.userCount) : [];

          var ctx = document.getElementById('currentMonthChart').getContext('2d');
          var chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: orderLabels.concat(userLabels),
              datasets: [{
                  label: 'Daily Order Data',
                  data: orderData,
                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
                },
                {
                  label: 'Daily User Data',
                  data: userData,
                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255, 99, 132, 1)',
                  borderWidth: 1
                }
              ]
            },
            options: {
              plugins: {
                title: {
                  display: true,
                  text: data.currentMonth || "Current Month Data"
                }
              },
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          });
        })
        .catch(error => console.error('Error fetching data:', error));

      // Helper function to format day labels (if needed)
      function getDayName(day) {
        return `Day ${day}`;
      }
    });
  </script>











//  weekly data
const admin_weekly_data = async (req, res) => {
    try {
        const currentDate = new Date();
        const startOfWeek = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - currentDate.getDay());
        const endOfWeek = new Date(startOfWeek.getFullYear(), startOfWeek.getMonth(), startOfWeek.getDate() + 7);

        const formatWeeklyData = (data, field) => {
            return Array.from({ length: 7 }, (_, index) => {
                const day = index + 1;
                const matchingData = data.find(item => item._id === day);
                return { _id: day, [field]: matchingData ? matchingData[field] : 0 };
            });
        };

        const weeklyOrderData = await Order.aggregate([
            {
                $match: {
                    paymentStatus: "Completed",
                    orderDate: { $gte: startOfWeek, $lt: endOfWeek }
                }
            },
            {
                $group: {
                    _id: { $dayOfWeek: "$orderDate" },
                    totalWeeklyPrice: { $sum: "$totalPrice" }
                }
            }
        ]);

        const weeklyUserData = await User.aggregate([
            {
                $match: {
                    createdAt: { $gte: startOfWeek, $lt: endOfWeek }
                }
            },
            {
                $group: {
                    _id: { $dayOfWeek: "$createdAt" },
                    userCount: { $sum: 1 }
                }
            }
        ]);

        const formattedWeeklyOrderData = formatWeeklyData(weeklyOrderData, 'totalWeeklyPrice');
        const formattedWeeklyUserData = formatWeeklyData(weeklyUserData, 'userCount');



        // LOGGING
        console.log('\n\n LOGGING  \n\n');

        console.log("Start of Week:", startOfWeek);
        console.log("End of Week:", endOfWeek);

        const sampleOrder = await Order.findOne();
        console.log("Sample Order:", sampleOrder);

        const sampleUser = await User.findOne();
        console.log("Sample User:", sampleUser);

        console.log("\nWeekly Order Data:", JSON.stringify(weeklyOrderData, null, 2));
        console.log("\nWeekly User Data:", JSON.stringify(weeklyUserData, null, 2));
        console.log("\nformattedWeeklyOrderData:", JSON.stringify(formattedWeeklyOrderData, null, 2));
        console.log("\nformattedWeeklyUserData:", JSON.stringify(formattedWeeklyUserData, null, 2));


        console.log("Order Aggregation IDs:", weeklyOrderData.map(data => data._id));
        console.log("User Aggregation IDs:", weeklyUserData.map(data => data._id));

        console.log('\n\n LOGGING COMPLETED  \n\n');



        res.json({ weeklyOrderData: formattedWeeklyOrderData, weeklyUserData: formattedWeeklyUserData });
    } catch (error) {
        console.error("Error in admin_weekly_data: ", error.message);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


// monthly data
const admin_monthly_data = async (req, res) => {
    try {
        const currentYear = new Date().getFullYear();

        // Helper to get start and end of the year
        const getYearRange = (year) => ({
            start: new Date(year, 0, 1),
            end: new Date(year + 1, 0, 1)
        });

        const { start, end } = getYearRange(currentYear);

        // Aggregating orders
        const monthlyOrderData = await Order.aggregate([
            {
                $match: {
                    paymentStatus: "Completed",
                    orderDate: { $gte: start, $lt: end }
                }
            },
            {
                $group: {
                    _id: { $month: "$orderDate" },
                    totalMonthlyPrice: { $sum: "$totalPrice" }
                }
            }
        ]);

        // Aggregating user registrations
        const monthlyUserData = await User.aggregate([
            {
                $match: {
                    createdAt: { $gte: start, $lt: end }
                }
            },
            {
                $group: {
                    _id: { $month: "$createdAt" },
                    userCount: { $sum: 1 }
                }
            }
        ]);

        // Format data
        const allMonths = Array.from({ length: 12 }, (_, index) => index + 1);

        const formatMonthlyData = (rawData, field) =>
            allMonths.map(month => {
                const match = rawData.find(data => data._id === month);
                return { _id: month, [field]: match ? match[field] : 0 };
            });

        const formattedMonthlyOrderData = formatMonthlyData(monthlyOrderData, "totalMonthlyPrice");
        const formattedMonthlyUserData = formatMonthlyData(monthlyUserData, "userCount");

        // Response
        res.json({
            currentYear,
            monthlyOrderData: formattedMonthlyOrderData,
            monthlyUserData: formattedMonthlyUserData
        });

    } catch (error) {
        console.error("Error inadmin_monthly_data : ", error.message);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

// current month
const admin_current_month_data = async (req, res) => {
    try {
        const currentDate = new Date();
        const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1); // Start of the current month
        const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1); // Start of the next month

        // Aggregating orders for the current month
        const dailyOrderData = await Order.aggregate([
            {
                $match: {
                    paymentStatus: "Completed",
                    orderDate: { $gte: startOfMonth, $lt: endOfMonth }
                }
            },
            {
                $group: {
                    _id: { $dayOfMonth: "$orderDate" },
                    totalDailyPrice: { $sum: "$totalPrice" }
                }
            }
        ]);

        // Aggregating user registrations for the current month
        const dailyUserData = await User.aggregate([
            {
                $match: {
                    createdAt: { $gte: startOfMonth, $lt: endOfMonth }
                }
            },
            {
                $group: {
                    _id: { $dayOfMonth: "$createdAt" },
                    userCount: { $sum: 1 }
                }
            }
        ]);

        // Get the total number of days in the current month
        const totalDays = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();

        // Format data to include all days of the month
        const formatDailyData = (rawData, field) =>
            Array.from({ length: totalDays }, (_, index) => {
                const day = index + 1;
                const match = rawData.find(data => data._id === day);
                return { _id: day, [field]: match ? match[field] : 0 };
            });

        const formattedDailyOrderData = formatDailyData(dailyOrderData, "totalDailyPrice");
        const formattedDailyUserData = formatDailyData(dailyUserData, "userCount");

        // Response
        res.json({
            currentMonth: `${currentDate.toLocaleString("default", { month: "long" })} ${currentDate.getFullYear()}`,
            dailyOrderData: formattedDailyOrderData,
            dailyUserData: formattedDailyUserData
        });

    } catch (error) {
        console.error("Error in admin_current_month_data: ", error.message);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


