const User = require('../models/userModel');
const Product = require('../models/productsModel');
const Category = require('../models/categoriesModel');

const fs = require('fs');
const path = require('path');
const sharp = require("sharp");

const bcrypt = require('bcrypt');
const { render } = require('../routes/userRoute');

const securePassword = async (password) => {

    try {

        const passwordHash = await bcrypt.hash(password, 10)
        return passwordHash

    } catch (error) {
        console.log(error.message);
    }

}

//to load the admin login page
const loadLogin = async (req, res) => {
    try {

        res.render('admin_login')

    } catch (error) {
        console.log("Error in loadLoginAdmin:", error.message);
    }
}


//to verify the admin login
const verifyLogin = async (req, res) => {

    try {
        const email = req.body.email
        const password = req.body.password

        const userData = await User.findOne({ email: email })

        if (userData) {
            if (userData.is_admin === 0) {
                return res.render('admin_login', { message: "Users should login using the admin page" });
            }

            const passwordMatch = await bcrypt.compare(password, userData.password)

            if (passwordMatch) {
                req.session.user_id = userData._id
                return res.redirect('/admin/admin_home');
            }
            else {
                return res.render('admin_login', { message: "Entered Email or password is incorrect" })
            }
        }
        else {
            return res.render('admin_login', { message: "Entered Email or password is incorrect" })
        }

    } catch (error) {
        console.log("Error in verifyLoginAdmin:  " + error.message);
    }
}

// load admin home
const adminHome = async (req, res) => {
    try {
        const userData = await User.findById({ _id: req.session.user_id })

        if (userData.is_admin === 1) {
            res.render('admin_home', { admin: userData })
        }

    } catch (error) {
        console.log("Error in adminHome:", error.message);
    }
}


// USERS


// admin_users_list
const admin_users_list = async (req, res) => {
    try {

        const page = parseInt(req.query.page) || 1; // Default to page 1 if not provided
        const limit = 10; // Number of users per page

        const totalCount = await User.countDocuments({ is_admin: 0 });
        const totalPages = Math.ceil(totalCount / limit);

        const usersData = await User.find({ is_admin: 0 }).skip((page - 1) * limit).limit(limit);

        res.render('admin_users_list', { users: usersData, totalPages, currentPage: page })

    } catch (error) {
        console.log("Error in admin_users_list : ", error.message);

    }
}

// admin_add_users_form
const admin_add_users_form = async (req, res) => {
    try {
        res.render('admin_add_users_form')
    } catch (error) {
        console.log("Error in admin_add_users_form : ", error.message);

    }
}


// admin_add_user
const admin_add_user = async (req, res) => {
    try {
        const spassword = await securePassword(req.body.password)

        const user = new User({
            username: req.body.username,
            email: req.body.email,
            mobile: req.body.mobile,

            image: req.file ? req.file.filename : "",

            password: spassword,
            is_admin: 0,
        })

        const userData = await user.save()

        if (userData) {
            res.render('admin_add_users_form', { message: 'Your Registration has been done Successfully !' })
            console.log('User Added Successfully !');
        }
        else {
            res.render('admin_add_users_form', { message: 'Your Registration has been Failed !!!' })
            console.log('User Add has been Failed !!!');

        }
    } catch (error) {
        console.log('Error in admin_add_user err :' + error.message);
    }
}

// admin_edit_users_form
const admin_edit_users_form = async (req, res) => {

    try {

        const id = req.query.id

        const userData = await User.findById({ _id: id })

        if (userData) {
            res.render('admin_edit_users_form', { user: userData })
        }
        else {
            res.redirect('/admin/admin_users_list')
        }

    } catch (error) {
        console.log("Error in admin_edit_users_form:", error.message);
    }
}

//admin_edit_user
const admin_edit_user = async (req, res) => {
    try {
        const updateData = {
            username: req.body.username,
            email: req.body.email,
            mobile: req.body.mobile,
        };

        if (req.file) {
            updateData.image = req.file.filename;
        }

        await User.findByIdAndUpdate(req.body.user_id, { $set: updateData });
        console.log('User Edited Successfully!');

        res.redirect('/admin/admin_users_list');

    } catch (error) {

        console.log("Error in admin_edit_user: ", error.message);
        res.redirect('/admin/admin_users_list');
    }
};

//admin_delete_user
const admin_delete_user = async (req, res) => {
    try {

        const id = req.query.id;

        await User.findByIdAndUpdate(id, { $set: { isDeleted: true, status: false } })

        res.redirect('/admin/admin_users_list');

    } catch (error) {
        console.log("Error in admin_delete_user: ", error.message);
    }
}

//admin_block_user
const admin_block_user = async (req, res) => {
    try {

        const id = req.query.id;

        await User.findByIdAndUpdate(id, { $set: { status: false } })

        res.redirect('/admin/admin_users_list');

    } catch (error) {
        console.log("Error in admin_block_user: ", error.message);
    }
}
//admin_unblock_user
const admin_unblock_user = async (req, res) => {
    try {

        const id = req.query.id;

        await User.findByIdAndUpdate(id, { $set: { status: true } })

        res.redirect('/admin/admin_users_list');

    } catch (error) {
        console.log("Error in admin_unblock_user: ", error.message);
    }
}




// PRODUCTS


// admin_products_list
const admin_products_list = async (req, res) => {
    try {

        const page = parseInt(req.query.page) || 1; // Default to page 1 if not provided
        const limit = 10; // Number of users per page

        const totalCount = await Product.countDocuments({});
        const totalPages = Math.ceil(totalCount / limit);

        const productsData = await Product.find({}).skip((page - 1) * limit).limit(limit);

        res.render('admin_products_list', { products: productsData, totalPages, currentPage: page })

    } catch (error) {
        console.log("Error in admin_products_list : ", error.message);
    }
}

// admin_add_product_form
const admin_add_product_form = async (req, res) => {
    try {
        const categoriesData = await Category.find({});

        res.render('admin_add_product_form', { categories: categoriesData })
    } catch (error) {
        console.log("Error in admin_add_product_form : ", error.message);

    }
}




// admin_add_product
const admin_add_product = async (req, res) => {
    try {

        const product = new Product({
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            productImages: [],
        })

        const imagePaths = req.files.map((file) => file.path);

        // Create a new folder for processed images
        const processedImagesFolder = './public/product_images/';
        if (!fs.existsSync(processedImagesFolder)) {
            fs.mkdirSync(processedImagesFolder, { recursive: true });
        }

        // Process and crop images using sharp
        const processedImages = await Promise.all(imagePaths.map(async (imagePath, index) => {
            const uniqueIdentifier = Date.now() + index;

            // Update the outputPath to include the processedImagesFolder
            const outputPath = `${processedImagesFolder}${uniqueIdentifier}_cropped.jpg`;

            await sharp(imagePath)
                .resize(750, 500)
                .toFile(outputPath);

            return outputPath;
        }));


        product.productImages = processedImages;

        const productData = await product.save()

        const categoriesData = await Category.find({});

        if (productData) {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product added Successfully !' })
            console.log('Product Added Successfully !');
        }
        else {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product adding Failed !!!' })
            console.log('Product Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_product : ", error.message);
        console.log("\n" + error);

    }
}





// admin_products_grid
const admin_products_grid = async (req, res) => {
    try {
        const productsData = await Product.find({})

        res.render('admin_products_grid', { products: productsData })
    } catch (error) {
        console.log("Error in admin_products_grid : ", error.message);

    }
}

// admin_edit_products_form
const admin_edit_product_form = async (req, res) => {

    try {

        const id = req.query.id

        const productData = await Product.findById({ _id: id })

        if (productData) {
            res.render('admin_edit_product_form', { products: productData })
        }
        else {
            res.redirect('/admin/admin_products_list')
        }

    } catch (error) {
        console.log("Error in admin_edit_product_form:", error.message);
    }
}

//admin_edit_product
const admin_edit_product = async (req, res) => {
    try {
        const productImages = req.files.map(file => file.filename);

        const updateData = {
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            scale: req.body.scale,
            productImages: productImages,

        };


        await Product.findByIdAndUpdate(req.query.id, { $set: updateData });
        console.log('Product Edited Successfully!');
        console.log(updateData);
        console.log(req.query.id);


        res.redirect('/admin/admin_products_list');

    } catch (error) {

        console.log("Error in admin_edit_product: ", error.message);
        res.redirect('/admin/admin_products_list');
    }
};

//admin_delete_product
const admin_delete_product = async (req, res) => {
    try {

        const id = req.query.id;

        await Product.findByIdAndUpdate(id, { $set: { isDeleted: true, isActive: false } })

        res.redirect('/admin/admin_products_list');

    } catch (error) {
        console.log("Error in admin_delete_product: ", error.message);
    }
}



// CATEGORIES


// admin_categories_list
const admin_categories_list = async (req, res) => {
    try {

        const page = parseInt(req.query.page) || 1; // Default to page 1 if not provided
        const limit = 10; // Number of users per page

        const totalCount = await Category.countDocuments({});
        const totalPages = Math.ceil(totalCount / limit);

        const categoriesData = await Category.find({}).skip((page - 1) * limit).limit(limit);


        res.render('admin_categories_list', { categories: categoriesData, totalPages, currentPage: page })
    } catch (error) {
        console.log("Error in admin_categories_list : ", error.message);
    }
}

// admin_add_categories_form
const admin_add_categories_form = async (req, res) => {
    try {
        res.render('admin_add_categories_form')
    } catch (error) {
        console.log("Error in admin_add_categories_form : ", error.message);
    }
}

// admin_add_categories
const admin_add_categories = async (req, res) => {
    try {


        const category = new Category({
            categoryName: req.body.categoryName,
            categoryDescription: req.body.categoryDescription,

            categoryImages: req.file ? req.file.filename : "",


        })
        const categoryData = await category.save()

        if (categoryData) {
            res.render('admin_add_categories_form', { message: 'Category added Successfully !' })
            console.log('Category Added Successfully !');
        }
        else {
            res.render('admin_add_categories_form', { message: 'Category adding Failed !!!' })
            console.log('Category Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_categories : ", error.message);

    }
}

// admin_edit_categories_form
const admin_edit_categories_form = async (req, res) => {

    try {

        const id = req.query.id

        const categoryData = await Category.findById({ _id: id })

        if (categoryData) {
            res.render('admin_edit_categories_form', { categories: categoryData })
        }
        else {
            res.redirect('/admin/admin_categories_list')
        }

    } catch (error) {
        console.log("Error in admin_edit_categories_form:", error.message);
    }
}

//admin_edit_categories
const admin_edit_categories = async (req, res) => {
    try {
        const updateData = {
            categoryName: req.body.categoryName,
            categoryDescription: req.body.categoryDescription,


        };

        if (req.file) {
            updateData.categoryImages = req.file.filename;
        }

        await Category.findByIdAndUpdate(req.query.id, { $set: updateData });
        console.log('Category Edited Successfully!');


        res.redirect('/admin/admin_categories_list');

    } catch (error) {

        console.log("Error in admin_edit_categories: ", error.message);
        res.redirect('/admin/admin_categories_list');
    }
};

//admin_delete_categories
const admin_delete_categories = async (req, res) => {
    try {

        const id = req.query.id;

        await Category.findByIdAndUpdate(id, { $set: { isDeleted: true, isActive: false  } })

        res.redirect('/admin/admin_categories_list');

    } catch (error) {
        console.log("Error in admin_delete_categories: ", error.message);
    }
}









//admin_logOut
const adminLogout = async (req, res) => {
    try {
        req.session.destroy();
        res.redirect('/admin');

    } catch (error) {
        console.log("Error in admin logout:", error.message)
    }
}




// ADMIN TEST
const admin_test = async (req, res) => {
    try {
        res.render('admin_test')
    } catch (error) {
        console.log("Error in admin_test : ", error.message);

    }
}

module.exports = {
    loadLogin,
    verifyLogin,
    adminHome,
    admin_users_list,
    admin_add_users_form,
    admin_add_user,
    admin_edit_users_form,
    admin_edit_user,
    admin_delete_user,
    admin_block_user,
    admin_unblock_user,
    admin_products_list,
    admin_products_grid,
    admin_add_product_form,
    admin_add_product,
    admin_edit_product_form,
    admin_edit_product,
    admin_delete_product,
    admin_categories_list,
    admin_add_categories_form,
    admin_add_categories,
    admin_edit_categories_form,
    admin_edit_categories,
    admin_delete_categories,



    adminLogout,
    admin_test,










}