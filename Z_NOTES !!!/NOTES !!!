//////////////////////////////////////////////////////

admin test

    <% - include("../layouts/admin_layouts/admin_header.ejs") -%>

    <% - include("../layouts/admin_layouts/admin_asidenav.ejs") -%>


        <main class="main-wrap">
            <%- include("../layouts/admin_layouts/admin_topnav.ejs") -%>

                <section class="content-main">
                    <div class="col-6 mx-auto">
                        <h1> !!! A D M I N - T E S T !!!</h1>
                    </div>

                </section> <!-- content-main end// -->

                <%- include("../layouts/admin_layouts/admin_footer.ejs") -%></main>


//////////////////////////////////////////////

// admin edit users form

<form action="" method="post">

    <div class="mb-4">
        <label for="username" class="form-label">User Name</label>
        <input type="text" placeholder="Enter Name" value="<%= user.username %>" class="form-control" name="username"
            required="">
    </div>
    <div class="mb-4">
        <label for="email" class="form-label">User Email-Id</label>
        <input type="email" placeholder="Enter Email" value="<%= user.email%>" class="form-control" name="email"
            required="">
    </div>
    <div class="mb-4">
        <label for="mobile" class="form-label">User Mobile No.</label>
        <input type="mobile" placeholder="Enter Mobile Number" value="<%= user.mobile %>" class="form-control"
            name="mobile" required="">
    </div>

    ///////////////////////////////////////////////////

    <!-- /// user image -->

    <!-- <div class="card mb-4">
        <div class="card-header">
            <h4>User Profile Picture</h4>
        </div>
        <div class="card-body">
            <div class="input-upload">
                <img src="/public/admin-assets/imgs/theme/upload.svg" alt="">
                    <input type="file" class="form-control" name="image" required="">
                    </div>
            </div>
        </div> -->


        <div class="card">
            <input type="submit" value="Update User Profile"
                class="btn btn-md rounded font-sm hover-up btn-success float-right">
        </div>

</form>



//////////////////////////////////////////////


admin_edit_user

const admin_edit_user = async (req, res) => {

    try {

        if (req.file) {
            const userData = await User.findByIdAndUpdate({ _id: req.body.user_id }, {
                $set: {
                    username: req.body.username, email:
                        req.body.email, mobile: req.body.mobile, image: req.file.filename
                }
            })
            console.log('User Edited Successfully !');
        }
        else {
            const userData = await User.findByIdAndUpdate({ _id: req.body.user_id }, {
                $set: {
                    username: req.body.username, email:
                        req.body.email, mobile: req.body.mobile
                }
            })
            console.log('User Not Edited !');
        }

        res.redirect('/admin/admin_users_list')

    } catch (error) {
        console.log("Error in admin_edit_user: ", error.message);
    }
}



//////////////// admin route sessiohn
//session handling
const session = require('express-session');
admin_route.use(session({
    secret: process.env.SESSION_SECRET,
    saveUninitialized: false,
    resave: false,
}))

////////////////////// index old load static
//load static file
const path = require('path')

app.use('/public', express.static(path.join(__dirname, 'public')))





//load static file
// const path = require('path')
// app.use('/public', express.static(path.join(__dirname, 'public')))


//////////////////////////////////////////////////////////////////////////

const product = new Product({
    productName: req.body.productName,
    model: req.body.model,
    brand: req.body.brand,
    scale: req.body.scale,
    colour: req.body.colour,
    description: req.body.description,
    regularPrice: req.body.regularPrice,
    salesPrice: req.body.salesPrice,

})
const productData = await product.save()

if (productData) {
    res.render('admin_add_product_form', { message: 'Product added Successfully !' })
    console.log('Product Added Successfully !');
}
else {
    res.render('admin_add_product_form', { message: 'Product adding Failed !!!' })
    console.log('Product Add has been Failed !!!');

}


/////////////////////////////////////////////////////////////////////

//product form

<form action="" method="post" enctype="multipart/form-data">
    <div class="mb-4">
        <label for="productName" class="form-label">Product title</label>
        <input type="text" placeholder="Type here" class="form-control" name="productName" required>
    </div>



    <div class="mb-4">
        <label for="model" class="form-label">Model</label>
        <input type="text" placeholder="Type here" class="form-control" name="model" required>
    </div>
    <div class="mb-4">
        <label for="brand" class="form-label">Brand</label>
        <input type="text" placeholder="Type here" class="form-control" name="brand" required>
    </div>
    <div class="mb-4">
        <label for="scale" class="form-label">Scale</label>
        <input type="text" placeholder="Type here" class="form-control" name="scale" required>
    </div>
    <div class="mb-4">
        <label for="colour" class="form-label">Colour</label>
        <input type="text" placeholder="Type here" class="form-control" name="colour" required>
    </div>



    <div class="mb-4">
        <label for="description" class="form-label">Full description</label>
        <textarea placeholder="Type here" class="form-control" rows="4" name="description" required></textarea>
    </div>
    <div class="row">
        <div class="card-header">
            <h4>Pricing</h4>
        </div>
        <div class="col-lg-4">
            <div class="mb-4">
                <label class="form-label">Regular price</label>
                <div class="row gx-2">
                    <input placeholder="₹" type="text" class="form-control" name="regularPrice" required>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-4">
                <label class="form-label">Promotional price</label>
                <input placeholder="₹" type="text" class="form-control" name="salesPrice" required>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h4>Media</h4>
            </div>
            <div class="card-body">
                <div class="input-upload">
                    <img src="/public/admin-assets/imgs/theme/upload.svg" alt="">
                        <input class="form-control" type="file">
                        </div>
                </div>
            </div> <!-- card end// -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>Organization</h4>
                </div>
                <div class="card-body">
                    <div class="row gx-2">
                        <div class="col-sm-6 mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select">
                                <option> Nissan </option>
                                <option> Honda </option>
                                <option> Mercedes </option>
                                <option> Chevrolet </option>
                            </select>
                        </div>
                    </div> <!-- row.// -->
                </div>
            </div> <!-- card end// -->

        </div>
        <div class="card">
            <input type="submit" value="Add Product" class="btn btn-md rounded font-sm hover-up btn-success float-right">
        </div>
</form>



///////////////////////////////////////////////////////////////////////////

//middleware multer

const multer = require('multer')
const path = require('path')

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, '../public/user_images'))
    },
    filename: function (req, file, cb) {
        const name = Date.now() + '-' + file.originalname;
        cb(null, name)
    }
})
const upload = multer({ storage: storage })

///////////////////////////////////////////////////////////////////////////

// multerConfig.js
const multer = require('multer');
const path = require('path');

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, 'product_images'));
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
});

const upload = multer({ storage: storage });


const user_images = multer({ dest: 'user_images/' });

module.exports = {
    upload,

    user_images
};

///////////////////////////////////////////////////////////////////////////
categories form

    < form action = "" method = "post" enctype = "multipart/form-data" >

    <div class="mb-4">
        <label for="categoryName" class="form-label">Category Name</label>
        <input type="text" placeholder="Enter Name" class="form-control" name="categoryName" required>
    </div>
    <div class="mb-4">
        <label for="categoryDescription" class="form-label">Description</label>
        <input type="text" placeholder="Enter Description" class="form-control" name="categoryDescription" required>
    </div>


    <div class="card-body">
        <div class="input-upload">
            <img src="/public/admin-assets/imgs/theme/upload.svg" alt="">
            <label for="categoryImages">Category Image:</label>
            <input type="file" class="form-control" name="categoryImages" id="categoryImages" accept="categoryImages/*">
        </div>
    </div>
    <div class="card">
        <input type="submit" value="Add Category" class="btn btn-md rounded font-sm hover-up btn-success float-right">
    </div>
</form>

///////////////////////////////////////////////////////////////////////////



// admin_add_categories
const admin_add_categories = async (req, res) => {
    try {

        console.log(req.body);

        const category = new Category({
            categoryName: req.body.categoryName,
            categoryDescription: req.body.categoryDescription,


        })
        const categoryData = await category.save()

        if (categoryData) {
            res.render('admin_add_categories', { message: 'Category added Successfully !' })
            console.log('Category Added Successfully !');
        }
        else {
            res.render('admin_add_categories', { message: 'Category adding Failed !!!' })
            console.log('Category Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_categories : ", error.message);

    }
}


//////////////////////////////////////////////////////////

user home page product grids size

    < div class="col-lg-3 col-md-4 col-12 col-sm-6" >
        <div class="product-cart-wrap mb-30" style="height: 95%;" >
            <div class="product-img-action-wrap" style="height: 60%;  display: flex; align-items: center; justify-content: center; object-fit: contain; " >
                <div class="product-img product-img-zoom" >

                    <% if (products[i].productImages) { %>
                                                            <a href="shop-product-right.html">
                                                                <img class="default-img"
                                                                    src="../public/product_images/<%= products[i].productImages[0] %>"
                                                                    alt=""
                                                                    >
                                                                <img class="hover-img"
                                                                    src="../public/product_images/<%= products[i].productImages[1] %>"
                                                                    alt=""
                                                                    >
                                                            </a>
                                                            <% } else { %>
                                                                No Image
                                                                <% } %>

                                                    </div>
                                                    <div class="product-action-1">
                                                        <a aria-label="Quick view" class="action-btn hover-up"
                                                            data-bs-toggle="modal" data-bs-target="#quickViewModal"><i
                                                                class="fi-rs-eye"></i></a>
                                                        <a aria-label="Add To Wishlist" class="action-btn hover-up"
                                                            href="shop-wishlist.html"><i class="fi-rs-heart"></i></a>
                                                        <a aria-label="Compare" class="action-btn hover-up"
                                                            href="shop-compare.html"><i class="fi-rs-shuffle"></i></a>
                                                    </div>
                                                    <div
                                                        class="product-badges product-badges-position product-badges-mrg">
                                                        <span class="hot">Hot</span>
                                                    </div>
                                                </div>
                                                <div class="product-content-wrap" style="height: 40%;">


//////////////////////////////////////////////////////////

USER BLOCKK/UNBLOCK

<% if (users[i].status) { %>

<a href="admin_block_user?id=<%= users[i]._id %>"
    class="btn btn-sm font-sm rounded btn-warning w-100 ">
    <i class="material-icons md-edit"></i> Block
</a>
<% } else { %>
    <a href="admin_unblock_user?id=<%= users[i]._id %>"
        class="btn btn-sm font-sm rounded btn-warning w-100 ">
        <i class="material-icons md-edit"></i> Unblock
    </a>

    <% } %>



USER BLOCKK/UNBLOCK with confirm box

<% if (users[i].status) { %>

<a href="#"
    onclick="confirmBlockUser('/admin/admin_block_user?id=<%= users[i]._id %>')"
    class="btn btn-sm font-sm rounded btn-warning w-100 ">
    <i class="material-icons md-edit"></i> Block
</a>
<% } else { %>
    <a href="#"
        onclick="confirmUnblockUser('/admin/admin_unblock_user?id=<%= users[i]._id %>')"
        class="btn btn-sm font-sm rounded btn-warning w-100 ">
        <i class="material-icons md-edit"></i> Unblock
    </a>

    <% } %>

//////////////////////////////////////////////////////////

user delete

<a href="admin_delete_user?id=<%= users[i]._id %>"
                                                    class="btn btn-sm font-sm btn-danger rounded mb-2 w-100 ">
                                                    <i class="material-icons md-delete_forever"></i> Delete
                                                </a>

user delete with confirm box

<a href="#"
                                                    onclick="confirmDeleteUser('/admin/admin_delete_user?id=<%= users[i]._id %>')"
                                                    class="btn btn-sm font-sm btn-danger rounded mb-2 w-100 ">
                                                    <i class="material-icons md-delete_forever"></i> Delete
                                                </a>


//////////////////////////////////////////////////////////

admin delete product

<a href="admin_delete_product?id=<%= products[i]._id %>"
                                                    class="btn btn-sm font-sm btn-light rounded">
                                                    <i class="material-icons md-delete_forever"></i> Delete
                                                </a>

//////////////////////////////////////////////////////////

admin delete category

<a href="admin_delete_categories?id=<%= categories[i]._id %>" class="btn btn-sm font-sm btn-light rounded">
                                                    <i class="material-icons md-delete_forever"></i> Delete
                                                </a>

//////////////////////////////////////////////////////////

 pagination default

 <div class="pagination-area mt-30 mb-50">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-start">
                                <li class="page-item active"><a class="page-link" href="#">01</a></li>
                                <li class="page-item"><a class="page-link" href="#">02</a></li>
                                <li class="page-item"><a class="page-link" href="#">03</a></li>
                                <li class="page-item"><a class="page-link dot" href="#">...</a></li>
                                <li class="page-item"><a class="page-link" href="#">16</a></li>
                                <li class="page-item"><a class="page-link" href="#"><i
                                            class="material-icons md-chevron_right"></i></a></li>
                            </ul>
                        </nav>
                    </div>

//////////////////////////////////////////////////////////

  USER REGISTER

  user_route.get('/register', userAuth.isLogout, userController.registerLoad)
user_route.post('/register', upload.single('image'),  userAuth.isLogout, userController.insertUser)


  //register load
const registerLoad = async (req, res) => {
    try {
        res.render('register')
    } catch (error) {
        console.log("registerLoad err :" + error.message);

    }
}

//insert user
const insertUser = async (req, res) => {
    try {
        const spassword = await securePassword(req.body.password)

        const user = new User({
            username: req.body.username,
            email: req.body.email,
            mobile: req.body.mobile,
            
            password: spassword,
            is_admin: 0,
        })

        const userData = await user.save()

        if (userData) {
            res.render('register', { message: 'Your Registration has been done Successfully !' })
            console.log('Your Registration has been done Successfully !');
        }
        else {
            res.render('register', { message: 'Your Registration has been Failed !!!' })
            console.log('Your Registration has been Failed !!!');

        }
    } catch (error) {
        console.log('insertUser err :' + error.message);
    }
}

//////////////////////////////////////////////////////////

// user register from

<form action="" method="post" onsubmit="return validateForm()">
<div class=" mb-4">
    <label for="username" class="form-label">User Name</label>
    <input type="text" placeholder="Enter Name" class="form-control"
        name="username">
    <span id="usernameError" class="error-message"
        style="color: red; margin-top: 10px;"></span>
</div>
<div class="mb-4">
    <label for="email" class="form-label">User Email-Id</label>
    <input type="email" placeholder="Enter Email" class="form-control"
        name="email">
    <span id="emailError" class="error-message"
        style="color: red; margin-top: 10px;"></span>
</div>
<div class="mb-4">
    <label for="mobile" class="form-label">User Mobile
        No.</label>
    <input type="text" placeholder="Enter Mobile Number"
        class="form-control" name="mobile">
    <span id="mobileError" class="error-message"
        style="color: red; margin-top: 10px;"></span>
</div>
<div class="mb-4">
    <label for="password" class="form-label">User
        Password</label>
    <input type="text" placeholder="Enter Password" class="form-control"
        name="password">
    <span id="passwordError" class="error-message"
        style="color: red; margin-top: 10px;"></span>
</div>

<!-- <div class="form-group">
<input required="" type="password" name="password"
    placeholder="Confirm password">
</div> -->






<div class="login_footer form-group">
    <div class="chek-form">
        <div class="custome-checkbox">
            <input class="form-check-input" type="checkbox"
                name="checkbox" id="exampleCheckbox12" value="">
            <label class="form-check-label"
                for="exampleCheckbox12"><span>I
                    agree to terms &amp; Policy.</span></label>
        </div>
    </div>
    <a href="page-privacy-policy.html"><i
            class="fi-rs-book-alt mr-5 text-muted"></i>Lean
        more</a>
</div>
<div class="form-group">
    <button type="submit" class="btn btn-fill-out btn-block hover-up"
        name="login">Register</button>
</div>
</form>

//////////////////////////////////////////////////////////

ADMIN LOGIN form

<form id="loginForm" method="post">
                                <div class="mb-3">
                                    <label for="username" class="form-label">Admin Name</label>

                                    <input class="form-control" placeholder="Username or email" name="email" id="email"
                                        type="email" value="admin1@gmail.com">
                                    <span class="error-message" id="emailError" style="color: red;"></span>
                                </div> <!-- form-group// -->
                                <div class="mb-3">
                                    <label for="password" class="form-label">Admin
                                        Password</label>
                                    <input class="form-control" placeholder="Password" name="password" id="password" type="password"
                                       value="admin1">
                                    <span class="error-message" id="emailError" style="color: red;"></span>
                                </div> <!-- form-group// -->


                                <div class="mb-3">
                                    <a href="#" class="float-end font-sm text-muted">Forgot password?</a>
                                    <label class="form-check">
                                        <input type="checkbox" class="form-check-input" checked="">
                                        <span class="form-check-label">Remember</span>
                                    </label>
                                </div> <!-- form-group form-check .// -->
                                <div class="mb-4">
                                    <button type="submit" name="login" class="btn btn-primary w-100"> Login </button>
                                </div> <!-- form-group// -->
                            </form>

 //////////////////////////////////////////////////////////

// admin_add_product
const admin_add_product = async (req, res) => {
    try {

        const productImages = 

        const product = new Product({
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            scale: req.body.scale,
            productImages: req.files.map(file => file.filename);,
        })

        const productData = await product.save()
        const categoriesData = await Category.find({});

        if (productData) {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product added Successfully !' })
            console.log('Product Added Successfully !');
        }
        else {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product adding Failed !!!' })
            console.log('Product Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_product : ", error.message);

    }
}

//////////////////////////////////////////////////////////

// admin_add_product new 

const admin_add_product = async (req, res) => {
    try {

        const product = new Product({
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            scale: req.body.scale,
            productImages: [],
        })
        const imagePaths = req.files.map(file => file.path);

        // Create a new folder for processed images
        const processedImagesFolder = 'productImages/';
        if (!fs.existsSync(processedImagesFolder)) {
            fs.mkdirSync(processedImagesFolder, { recursive: true });
        }

        // Process and crop images using sharp
        const processedImages = await Promise.all(imagePaths.map(async (imagePath, index) => {
            const uniqueIdentifier = Date.now() + index;

            // Update the outputPath to include the processedImagesFolder
            const outputPath = `${processedImagesFolder} ${uniqueIdentifier}_cropped.jpg`;

            await sharp(imagePath)
                .resize(750, 750)
                .toFile(outputPath);

            return outputPath;
        }));

         product.productImages = processedImages;


        const productData = await product.save()
        const categoriesData = await Category.find({});

        if (productData) {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product added Successfully !' })
            console.log('Product Added Successfully !');
        }
        else {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product adding Failed !!!' })
            console.log('Product Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_product : ", error.message);
        console.log("\n" + error);

    }
}

//////////////////////////////////////////////////////////


// admin_add_product new 2
const admin_add_product = async (req, res) => {
    try {

        const product = new Product({
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            scale: req.body.scale,
            productImages: [],
        })
        const imagePaths = req.files.map(file => file.filename);

        // Create a new folder for processed images
        const processedImagesFolder = './public/product_images/';
        if (!fs.existsSync(processedImagesFolder)) {
            fs.mkdirSync(processedImagesFolder, { recursive: true });
        }

        // Process and crop images using sharp
        const processedImages = await Promise.all(imagePaths.map(async (imagePath, index) => {
            const uniqueIdentifier = Date.now() + index;

            // Update the outputPath to include the processedImagesFolder
            const outputPath = `${processedImagesFolder} ${uniqueIdentifier}_cropped`;

            await sharp(imagePath)
                .resize(750, 750)
                .toFile(outputPath);

            return outputPath;
        }));

         product.productImages = processedImages;

        const productData = await product.save()


        const categoriesData = await Category.find({});

        if (productData) {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product added Successfully !' })
            console.log('Product Added Successfully !');
        }
        else {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product adding Failed !!!' })
            console.log('Product Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_product : ", error.message);
        console.log("\n" + error);

    }
}

//////////////////////////////////////////////////////////


// admin_add_product with crop final
const admin_add_product = async (req, res) => {
    try {

        const product = new Product({
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,
            productImages: [],
        })

        const imagePaths = req.files.map((file) => file.path);

        // Create a new folder for processed images
        const processedImagesFolder = './public/product_images/';
        if (!fs.existsSync(processedImagesFolder)) {
            fs.mkdirSync(processedImagesFolder, { recursive: true });
        }

        // Process and crop images using sharp
        const processedImages = await Promise.all(imagePaths.map(async (imagePath, index) => {
            const uniqueIdentifier = Date.now() + index;

            // Update the outputPath to include the processedImagesFolder
            const outputPath = `${processedImagesFolder}${uniqueIdentifier}_cropped.jpg`;

            await sharp(imagePath)
                .resize(750, 750)
                .toFile(outputPath);

            return outputPath;
        }));


        product.productImages = processedImages;

        const productData = await product.save()

        const categoriesData = await Category.find({});

        if (productData) {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product added Successfully !' })
            console.log('Product Added Successfully !');
        }
        else {
            res.render('admin_add_product_form', { categories: categoriesData, message: 'Product adding Failed !!!' })
            console.log('Product Add has been Failed !!!');

        }

    } catch (error) {
        console.log("Error in admin_add_product : ", error.message);
        console.log("\n" + error);

    }
}

//////////////////////////////////////////////////////////

// USER EDIT ADDRESS

  // user_edit_address_form
  const user_edit_address_form = async (req, res) => {
    try {

        const userData = req.session.user_id
        const addressid = req.query.addressid;
        const addressData = await User.findById(
            userData,
            { 'address.$': 1 },
            { new: true }
          ).elemMatch('address', { _id: addressid });
        
       
        
        res.render('user_edit_address_form', { user: userData, addressData: addressData })
    } catch (error) {
        console.error('Error in user_edit_address_form :', error);
    }
}

//////////////////////////////////////////////////////////

// user cart page quantity
<td class="text-center" data-title="Stock">
                                                        <div class="pt-20" style="display: flex; align-items: center;">

                                                            <a href="#" class="qty-down btn btn-outline-primary"
                                                                onclick="decreaseQty(event,'<%= product.productId._id %>', this.value) "
                                                                style="padding: 7px; border-radius: 4px 0 0 4px;">
                                                                <i>-</i>
                                                            </a>

                                                            <input type="number" class="quantity-input"
                                                                id="quantity_<%= product.productId._id %>"
                                                                value="<%= product.quantity %>" min="1" max="10"
                                                                step="1"
                                                                style="padding: 5px; width: 70%; height:auto;  text-align: center; border: 1px solid #ced4da; border-radius: 0;"
                                                                oninput="validateQuantity(event,'<%= product.productId._id %>', this.value);"
                                                                onchange="updateQuantity('<%= product.productId._id %>', this.value)">



                                                            <a href="#" class="qty-up btn btn-outline-primary"
                                                                onclick="increaseQty(event,'<%= product.productId._id %>', this.value) "
                                                                style="padding: 7px; border-radius: 0 4px 4px 0;">
                                                                <i>+</i>
                                                            </a>

                                                            


                                                        </div>
                                                        <label id="quantityError_<%= product.productId._id %>"
                                                            style="color: red;"></label>
                                                    </td>

//////////////////////////////////////////////////////////

// user cart page shipping form

<div class="col-lg-6 col-md-12">
                                        <div class="heading_s1 mb-3">
                                            <h4>Calculate Shipping</h4>
                                        </div>
                                        <p class="mt-15 mb-30">Flat rate: <span
                                                class="font-xl text-brand fw-900">5%</span>
                                        </p>
                                        <form class="field_form shipping_calculator">
                                            <div class="form-row">
                                                <div class="form-group col-lg-12">
                                                    <div class="custom_select">
                                                        <select class="form-control select-active">
                                                            <option value="">Choose a option...</option>
                                                            <option value="AX">Aland Islands</option>
                                                            <option value="AF">Afghanistan</option>
                                                            <option value="AL">Albania</option>
                                                            <option value="DZ">Algeria</option>
                                                            <option value="AD">Andorra</option>
                                                            <option value="AO">Angola</option>
                                                            <option value="AI">Anguilla</option>
                                                            <option value="AQ">Antarctica</option>
                                                            <option value="AG">Antigua and Barbuda</option>
                                                            <option value="AR">Argentina</option>
                                                            <option value="AM">Armenia</option>
                                                            <option value="AW">Aruba</option>
                                                            <option value="AU">Australia</option>
                                                            <option value="AT">Austria</option>
                                                            <option value="AZ">Azerbaijan</option>
                                                            <option value="BS">Bahamas</option>
                                                            <option value="BH">Bahrain</option>
                                                            <option value="BD">Bangladesh</option>
                                                            <option value="BB">Barbados</option>
                                                            <option value="BY">Belarus</option>
                                                            <option value="PW">Belau</option>
                                                            <option value="BE">Belgium</option>
                                                            <option value="BZ">Belize</option>
                                                            <option value="BJ">Benin</option>
                                                            <option value="BM">Bermuda</option>
                                                            <option value="BT">Bhutan</option>
                                                            <option value="BO">Bolivia</option>
                                                            <option value="BQ">Bonaire, Saint Eustatius and Saba
                                                            </option>
                                                            <option value="BA">Bosnia and Herzegovina</option>
                                                            <option value="BW">Botswana</option>
                                                            <option value="BV">Bouvet Island</option>
                                                            <option value="BR">Brazil</option>
                                                            <option value="IO">British Indian Ocean Territory</option>
                                                            <option value="VG">British Virgin Islands</option>
                                                            <option value="BN">Brunei</option>
                                                            <option value="BG">Bulgaria</option>
                                                            <option value="BF">Burkina Faso</option>
                                                            <option value="BI">Burundi</option>
                                                            <option value="KH">Cambodia</option>
                                                            <option value="CM">Cameroon</option>
                                                            <option value="CA">Canada</option>
                                                            <option value="CV">Cape Verde</option>
                                                            <option value="KY">Cayman Islands</option>
                                                            <option value="CF">Central African Republic</option>
                                                            <option value="TD">Chad</option>
                                                            <option value="CL">Chile</option>
                                                            <option value="CN">China</option>
                                                            <option value="CX">Christmas Island</option>
                                                            <option value="CC">Cocos (Keeling) Islands</option>
                                                            <option value="CO">Colombia</option>
                                                            <option value="KM">Comoros</option>
                                                            <option value="CG">Congo (Brazzaville)</option>
                                                            <option value="CD">Congo (Kinshasa)</option>
                                                            <option value="CK">Cook Islands</option>
                                                            <option value="CR">Costa Rica</option>
                                                            <option value="HR">Croatia</option>
                                                            <option value="CU">Cuba</option>
                                                            <option value="CW">CuraÇao</option>
                                                            <option value="CY">Cyprus</option>
                                                            <option value="CZ">Czech Republic</option>
                                                            <option value="DK">Denmark</option>
                                                            <option value="DJ">Djibouti</option>
                                                            <option value="DM">Dominica</option>
                                                            <option value="DO">Dominican Republic</option>
                                                            <option value="EC">Ecuador</option>
                                                            <option value="EG">Egypt</option>
                                                            <option value="SV">El Salvador</option>
                                                            <option value="GQ">Equatorial Guinea</option>
                                                            <option value="ER">Eritrea</option>
                                                            <option value="EE">Estonia</option>
                                                            <option value="ET">Ethiopia</option>
                                                            <option value="FK">Falkland Islands</option>
                                                            <option value="FO">Faroe Islands</option>
                                                            <option value="FJ">Fiji</option>
                                                            <option value="FI">Finland</option>
                                                            <option value="FR">France</option>
                                                            <option value="GF">French Guiana</option>
                                                            <option value="PF">French Polynesia</option>
                                                            <option value="TF">French Southern Territories</option>
                                                            <option value="GA">Gabon</option>
                                                            <option value="GM">Gambia</option>
                                                            <option value="GE">Georgia</option>
                                                            <option value="DE">Germany</option>
                                                            <option value="GH">Ghana</option>
                                                            <option value="GI">Gibraltar</option>
                                                            <option value="GR">Greece</option>
                                                            <option value="GL">Greenland</option>
                                                            <option value="GD">Grenada</option>
                                                            <option value="GP">Guadeloupe</option>
                                                            <option value="GT">Guatemala</option>
                                                            <option value="GG">Guernsey</option>
                                                            <option value="GN">Guinea</option>
                                                            <option value="GW">Guinea-Bissau</option>
                                                            <option value="GY">Guyana</option>
                                                            <option value="HT">Haiti</option>
                                                            <option value="HM">Heard Island and McDonald Islands
                                                            </option>
                                                            <option value="HN">Honduras</option>
                                                            <option value="HK">Hong Kong</option>
                                                            <option value="HU">Hungary</option>
                                                            <option value="IS">Iceland</option>
                                                            <option value="IN">India</option>
                                                            <option value="ID">Indonesia</option>
                                                            <option value="IR">Iran</option>
                                                            <option value="IQ">Iraq</option>
                                                            <option value="IM">Isle of Man</option>
                                                            <option value="IL">Israel</option>
                                                            <option value="IT">Italy</option>
                                                            <option value="CI">Ivory Coast</option>
                                                            <option value="JM">Jamaica</option>
                                                            <option value="JP">Japan</option>
                                                            <option value="JE">Jersey</option>
                                                            <option value="JO">Jordan</option>
                                                            <option value="KZ">Kazakhstan</option>
                                                            <option value="KE">Kenya</option>
                                                            <option value="KI">Kiribati</option>
                                                            <option value="KW">Kuwait</option>
                                                            <option value="KG">Kyrgyzstan</option>
                                                            <option value="LA">Laos</option>
                                                            <option value="LV">Latvia</option>
                                                            <option value="LB">Lebanon</option>
                                                            <option value="LS">Lesotho</option>
                                                            <option value="LR">Liberia</option>
                                                            <option value="LY">Libya</option>
                                                            <option value="LI">Liechtenstein</option>
                                                            <option value="LT">Lithuania</option>
                                                            <option value="LU">Luxembourg</option>
                                                            <option value="MO">Macao S.A.R., China</option>
                                                            <option value="MK">Macedonia</option>
                                                            <option value="MG">Madagascar</option>
                                                            <option value="MW">Malawi</option>
                                                            <option value="MY">Malaysia</option>
                                                            <option value="MV">Maldives</option>
                                                            <option value="ML">Mali</option>
                                                            <option value="MT">Malta</option>
                                                            <option value="MH">Marshall Islands</option>
                                                            <option value="MQ">Martinique</option>
                                                            <option value="MR">Mauritania</option>
                                                            <option value="MU">Mauritius</option>
                                                            <option value="YT">Mayotte</option>
                                                            <option value="MX">Mexico</option>
                                                            <option value="FM">Micronesia</option>
                                                            <option value="MD">Moldova</option>
                                                            <option value="MC">Monaco</option>
                                                            <option value="MN">Mongolia</option>
                                                            <option value="ME">Montenegro</option>
                                                            <option value="MS">Montserrat</option>
                                                            <option value="MA">Morocco</option>
                                                            <option value="MZ">Mozambique</option>
                                                            <option value="MM">Myanmar</option>
                                                            <option value="NA">Namibia</option>
                                                            <option value="NR">Nauru</option>
                                                            <option value="NP">Nepal</option>
                                                            <option value="NL">Netherlands</option>
                                                            <option value="AN">Netherlands Antilles</option>
                                                            <option value="NC">New Caledonia</option>
                                                            <option value="NZ">New Zealand</option>
                                                            <option value="NI">Nicaragua</option>
                                                            <option value="NE">Niger</option>
                                                            <option value="NG">Nigeria</option>
                                                            <option value="NU">Niue</option>
                                                            <option value="NF">Norfolk Island</option>
                                                            <option value="KP">North Korea</option>
                                                            <option value="NO">Norway</option>
                                                            <option value="OM">Oman</option>
                                                            <option value="PK">Pakistan</option>
                                                            <option value="PS">Palestinian Territory</option>
                                                            <option value="PA">Panama</option>
                                                            <option value="PG">Papua New Guinea</option>
                                                            <option value="PY">Paraguay</option>
                                                            <option value="PE">Peru</option>
                                                            <option value="PH">Philippines</option>
                                                            <option value="PN">Pitcairn</option>
                                                            <option value="PL">Poland</option>
                                                            <option value="PT">Portugal</option>
                                                            <option value="QA">Qatar</option>
                                                            <option value="IE">Republic of Ireland</option>
                                                            <option value="RE">Reunion</option>
                                                            <option value="RO">Romania</option>
                                                            <option value="RU">Russia</option>
                                                            <option value="RW">Rwanda</option>
                                                            <option value="ST">São Tomé and Príncipe</option>
                                                            <option value="BL">Saint Barthélemy</option>
                                                            <option value="SH">Saint Helena</option>
                                                            <option value="KN">Saint Kitts and Nevis</option>
                                                            <option value="LC">Saint Lucia</option>
                                                            <option value="SX">Saint Martin (Dutch part)</option>
                                                            <option value="MF">Saint Martin (French part)</option>
                                                            <option value="PM">Saint Pierre and Miquelon</option>
                                                            <option value="VC">Saint Vincent and the Grenadines</option>
                                                            <option value="SM">San Marino</option>
                                                            <option value="SA">Saudi Arabia</option>
                                                            <option value="SN">Senegal</option>
                                                            <option value="RS">Serbia</option>
                                                            <option value="SC">Seychelles</option>
                                                            <option value="SL">Sierra Leone</option>
                                                            <option value="SG">Singapore</option>
                                                            <option value="SK">Slovakia</option>
                                                            <option value="SI">Slovenia</option>
                                                            <option value="SB">Solomon Islands</option>
                                                            <option value="SO">Somalia</option>
                                                            <option value="ZA">South Africa</option>
                                                            <option value="GS">South Georgia/Sandwich Islands</option>
                                                            <option value="KR">South Korea</option>
                                                            <option value="SS">South Sudan</option>
                                                            <option value="ES">Spain</option>
                                                            <option value="LK">Sri Lanka</option>
                                                            <option value="SD">Sudan</option>
                                                            <option value="SR">Suriname</option>
                                                            <option value="SJ">Svalbard and Jan Mayen</option>
                                                            <option value="SZ">Swaziland</option>
                                                            <option value="SE">Sweden</option>
                                                            <option value="CH">Switzerland</option>
                                                            <option value="SY">Syria</option>
                                                            <option value="TW">Taiwan</option>
                                                            <option value="TJ">Tajikistan</option>
                                                            <option value="TZ">Tanzania</option>
                                                            <option value="TH">Thailand</option>
                                                            <option value="TL">Timor-Leste</option>
                                                            <option value="TG">Togo</option>
                                                            <option value="TK">Tokelau</option>
                                                            <option value="TO">Tonga</option>
                                                            <option value="TT">Trinidad and Tobago</option>
                                                            <option value="TN">Tunisia</option>
                                                            <option value="TR">Turkey</option>
                                                            <option value="TM">Turkmenistan</option>
                                                            <option value="TC">Turks and Caicos Islands</option>
                                                            <option value="TV">Tuvalu</option>
                                                            <option value="UG">Uganda</option>
                                                            <option value="UA">Ukraine</option>
                                                            <option value="AE">United Arab Emirates</option>
                                                            <option value="GB">United Kingdom (UK)</option>
                                                            <option value="US">USA (US)</option>
                                                            <option value="UY">Uruguay</option>
                                                            <option value="UZ">Uzbekistan</option>
                                                            <option value="VU">Vanuatu</option>
                                                            <option value="VA">Vatican</option>
                                                            <option value="VE">Venezuela</option>
                                                            <option value="VN">Vietnam</option>
                                                            <option value="WF">Wallis and Futuna</option>
                                                            <option value="EH">Western Sahara</option>
                                                            <option value="WS">Western Samoa</option>
                                                            <option value="YE">Yemen</option>
                                                            <option value="ZM">Zambia</option>
                                                            <option value="ZW">Zimbabwe</option>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-row row">
                                                <div class="form-group col-lg-6">
                                                    <input required="required" placeholder="State / Country" name="name"
                                                        type="text">
                                                </div>
                                                <div class="form-group col-lg-6">
                                                    <input required="required" placeholder="PostCode / ZIP" name="name"
                                                        type="text">
                                                </div>
                                            </div>
                                            <div class="form-row">
                                                <div class="form-group col-lg-12">
                                                    <button class="btn  btn-sm"><i
                                                            class="fi-rs-shuffle mr-10"></i>Update</button>
                                                </div>
                                            </div>
                                        </form>
                                        <div class="mb-30 mt-50">
                                            <div class="heading_s1 mb-3">
                                                <h4>Apply Coupon</h4>
                                            </div>
                                            <div class="total-amount">
                                                <div class="left">
                                                    <div class="coupon">
                                                        <form action="#" target="_blank">
                                                            <div class="form-row row justify-content-center">
                                                                <div class="form-group col-lg-6">
                                                                    <input class="font-medium" name="Coupon"
                                                                        placeholder="Enter Your Coupon">
                                                                </div>
                                                                <div class="form-group col-lg-6">
                                                                    <button class="btn  btn-sm"><i
                                                                            class="fi-rs-label mr-10"></i>Apply</button>
                                                                </div>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    //////////////////////////////////////////////////////////


//  CART LIST FRONTEND

<div class="table-responsive">
                                <table class="table shopping-summery text-center clean">
                                    <thead>
                                        <tr class="main-heading">
                                            <th scope="col">Image</th>
                                            <th scope="col">Name</th>
                                            <th scope="col">Price</th>
                                            <th scope="col">Quantity</th>
                                            <th scope="col">Subtotal</th>
                                            <th scope="col">Remove</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <% if (cart && cart.products.length> 0 ) { %>
                                            <% cart.products.forEach((product,index)=> { %>


                                                <tr class="<%= index % 2 === 0 ? 'even-row' : 'odd-row' %>"
                                                    id="<%= `product-${product.productId._id}` %>">

                                                    <td class="image product-thumbnail"><img
                                                            src="/<%= product.productId.productImages[0] %>" alt="#">
                                                    </td>
                                                    <td class="product-des product-name">
                                                        <h5 class="product-name"><a
                                                                href="/user_product_page?id=<%= product.productId._id %>">
                                                                <%= product.productId.productName %>
                                                            </a></h5>
                                                        <p class="font-xs">Scale : <%= product.productId.scale %> ,
                                                                Color :<%= product.productId.colour %> <br>
                                                                    Category : <%= product.productId.category %>
                                                        </p>
                                                    </td>
                                                    <td class="price" data-title="Price"><span>
                                                            <%= product.productId.salesPrice %>
                                                        </span></td>


                                                    <td class="text-center" data-title="Stock">
                                                        <div class="pt-20" style="display: flex; align-items: center;">


                                                            <input type="number" class="quantity-input"
                                                                id="quantity_<%= product.productId._id %>"
                                                                value="<%= product.quantity %>" min="1" max="10"
                                                                step="1" <%#
                                                                style="padding: 5px; width: 70%; height:auto;  text-align: center; border: 1px solid #ced4da; border-radius: 0;"
                                                                %>
                                                            oninput="validateQuantity(event,'<%= product.productId._id
                                                                %>', this.value);"
                                                                onchange="updateQuantity('<%= product.productId._id %>',
                                                                    this.value)">

                                                        </div>
                                                        <label id="quantityError_<%= product.productId._id %>"
                                                            style="color: red;"></label>
                                                    </td>


                                                    <td class="text-right" data-title="Cart">
                                                        <span class="subtotal"
                                                            id="subtotal_<%= product.productId._id %>"> ₹<%=
                                                                product.productId.salesPrice * product.quantity %>
                                                        </span>
                                                    </td>
                                                    <td class="action" data-title="Remove">
                                                        <a href="#" class="text-muted"
                                                            onclick="removeProduct('<%= product.productId._id %>', '<%= product.productId.productName %>')">
                                                            <i class="fi-rs-trash"> </i>
                                                        </a>
                                                    </td>
                                                </tr>

                                                <% }) %>
                                                    <tr>
                                                        <td colspan="6" class="text-end">
                                                            <a href="#" onclick="clearCart()" class="text-muted"> <i
                                                                    class="fi-rs-cross-small"></i> Clear
                                                                Cart</a>
                                                        </td>
                                                    </tr>


                                                    <% } else { %>
                                                        <tr>
                                                            `<td colspan="6" class="text-center">
                                                                <h3 style="margin: 20px;">Your cart is empty, Please Add
                                                                    Products to Your Cart.</h3>
                                                            </td>` </tr>
                                                        <% } %>






                                    </tbody>
                                </table>
                            </div>


////////////////////////////////////////////////////////////////

// CART VALIDATION SCRIPT

<!-- ------ SCRIPT  ------- -->
<script>
    const min = 1
    const max = 10

    function decreaseQty(event, productId, newQuantity) {
        event.preventDefault();
        const qtyInput = document.getElementById(`quantity_${productId}`);
        let currentValue = parseInt(qtyInput.value, 10);

        if (currentValue > min) {
            qtyInput.value = currentValue - 1;

        } else {
            document.getElementById(`quantityError_${productId}`).textContent = `Minimum quantity is ${min}`;
        }
    }

    function increaseQty(event, productId, newQuantity) {
        event.preventDefault();
        const qtyInput = document.getElementById(`quantity_${productId}`);
        let currentValue = parseInt(qtyInput.value, 10);

        if (currentValue < max) {
            qtyInput.value = currentValue + 1;

        } else {
            document.getElementById(`quantityError_${productId}`).textContent = `Maximum quantity is ${max}`;
        }
    }

    function validateQuantity(event, productId, newQuantity) {
        event.preventDefault();

        const qtyInput = document.getElementById(`quantity_${productId}`);
        const errorLabel = document.getElementById(`quantityError_${productId}`);
        const value = parseInt(qtyInput.value, 10);

        if (value < min || value > max) {
            errorLabel.innerText = `Please enter a value between 1 and 10.`;
        } else {
            errorLabel.innerText = '';
        }
    }

    function updateQuantity(productId, newQuantity) {


        fetch(`/user_update_cart_quantity?productId=${productId}&newQuantity=${newQuantity}`)
            .then(response => response.json())
            .then(data => {
                const updatedProduct = data.productData.find(item => item.productId._id === productId);
                const quantityInput = document.getElementById(`quantity_${productId}`);
                const errorLabel = document.getElementById(`quantityError_${productId}`);

                // Check if the updated quantity exceeds the total available quantity
                if (updatedProduct && updatedProduct.quantity <= updatedProduct.productId.quantity) {

                    // Quantity is within limits
                    quantityInput.value = updatedProduct.quantity;
                    errorLabel.innerText = '';  // Clear the error label
                    const subtotalElement = document.getElementById(`subtotal_${productId}`);
                    subtotalElement.innerText = `₹${updatedProduct.productId.salesPrice * updatedProduct.quantity}`;

                    calculateAndDisplayCartTotals(data.productData);

                } else {
                    // Handle the case where the updated quantity exceeds the total available quantity
                    errorLabel.innerText = `Maximum available quantity: ${updatedProduct.productId.quantity}`;
                    // You may choose to set the quantity to the maximum available or take other actions as needed
                    quantityInput.value = updatedProduct.productId.quantity;
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
            });
    }


    function validateCheckout() {
        let isValid = true; // Initialize as valid

        // Loop through each product in the cart
        cart.products.forEach(product => {
            const productId = product.productId._id;
            const qtyInput = document.getElementById(`quantity_${productId}`);
            const errorLabel = document.getElementById(`quantityError_${productId}`);
            const value = parseInt(qtyInput.value, 10);

            // Get the available stock for the product
            const availableStock = product.quantity; // Assuming this is how you get the stock

            // Call your existing validateQuantity function
            validateQuantity(event, 'productId')

            if(validateQuantity()===false){
                isValid=false
            } 

        });

        return isValid; // Return the overall validity
    }


///////////////////////////////////////////////////

// admin orders list


// admin_orders_list

const admin_orders_list = async (req, res) => {
    try {
        const ordersListSearch = req.query.ordersListSearch || '';
        const ordersListSelect = req.query.orderStatus === 'Search status' ? '' : req.query.orderStatus || '';
        const ordersListPage = parseInt(req.query.ordersListPage, 10) || 1;
        const ordersListPageLimit = 5;

        const ordersResultData = {
            $and: [{ "products.productStatus": { $regex: '.*' + ordersListSelect + '.*', $options: 'i' } }],
            $or: [
                { orderid: { $regex: '.*' + ordersListSearch + '.*', $options: 'i' } },
                { "address.firstName": { $regex: '.*' + ordersListSearch + '.*', $options: 'i' } },
                { "address.lastName": { $regex: '.*' + ordersListSearch + '.*', $options: 'i' } },
                { "address.deliveryemail": { $regex: '.*' + ordersListSearch + '.*', $options: 'i' } },
                { "products.productName": { $regex: '.*' + ordersListSearch + '.*', $options: 'i' } },
            ]
        };


        
        const ordersData = await Order.find(ordersResultData)
            .populate('userId')
            .limit(ordersListPageLimit)
            .skip((ordersListPage - 1) * ordersListPageLimit)
            .sort({ $natural: -1 })
            .exec();

        // console.log("ordersData:" ,ordersData)

        const ordersListPageCount = await Order.find(ordersResultData).countDocuments();

        const orderStatus = await Order.find()

        res.render('admin_orders_list', {
            allOrders: ordersData,
            orderStatus: orderStatus,
            ordersListTotalPages: Math.ceil(ordersListPageCount / ordersListPageLimit),
            ordersListCurrentPage: ordersListPage,
            ordersListSearch
        });

    } catch (error) {
        console.error('Error in admin_orders_list:', error.message);
        res.status(500).send('Internal Server Error');
    }
};

// frontend
<%- include("../layouts/admin_layouts/admin_header.ejs") -%>

    <div class="screen-overlay"></div>

    <%- include("../layouts/admin_layouts/admin_asidenav.ejs") -%>

        <main class="main-wrap">

            <%- include("../layouts/admin_layouts/admin_topnav.ejs") -%>

                <section class="content-main">
                    <div class="content-header">
                        <div>
                            <h2 class="content-title card-title">Order List </h2>
                        </div>
                    </div>
                    <div class="card mb-4">
                        <header class="card-header">
                            <div class="row gx-3">

                                <form id="ordersFilterForm" action="/admin/admin_order_list" method="get"
                                    class="d-flex justify-content-between align-items-center">
                                    <div class="col-md-3 col-12 mb-md-0 mb-3">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Search term"
                                                name="ordersListSearch"
                                                value="<%= ordersListSearch ? ordersListSearch : '' %>">
                                            <button type="submit" class="btn btn-light bg">
                                                <i class="material-icons md-search"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="col-lg-2 col-6 col-md-8">
                                        <div class="input-group">
                                            <select id="orderStatusFilter" class="form-select" name="orderStatus">
                                                <option value="">Search status</option>
                                                <option name="ordersListSelect" value="Order Placed"
                                                    <%=orderStatus==='Order Placed' ? 'selected' : '' %>>Order Placed
                                                </option>
                                                <option name="ordersListSelect" value="Shipped"
                                                    <%=orderStatus==='Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option name="ordersListSelect" value="Delivered"
                                                    <%=orderStatus==='Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option name="ordersListSelect" value="Cancelled"
                                                    <%=orderStatus==='Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                <option name="ordersListSelect" value="Returned"
                                                    <%=orderStatus==='Returned' ? 'selected' : '' %>>Returned</option>
                                            </select>

                                            <button type="submit" class="btn btn-light bg">
                                                <i class="material-icons md-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>


                            </div>
                        </header> <!-- card-header end// -->
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover table-bordered text-center">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Order ID</th>
                                            <th>Date</th>
                                            <th>Username</th>
                                            <th>Address</th>
                                            <th>Total</th>
                                            <th>Products</th>
                                            <th>Status</th>
                                            <th>Change Status</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (allOrders && allOrders.length> 0) { %>
                                            <% for (let i=0; i < allOrders.length; i++) { %>
                                                <tr class="<%= i % 2 === 0 ? 'even-row' : 'odd-row' %>">
                                                    <td class="align-middle">
                                                        <%= allOrders[i].orderid %>
                                                    </td>
                                                    <td class="align-middle">
                                                        <%= allOrders[i].orderDate.toLocaleDateString() %>
                                                    </td>
                                                    <td class="align-middle"><b>
                                                            <%= allOrders[i].userId.username %>
                                                                
                                                        </b></td>
                                                    <td class="align-middle">
                                                        <%= allOrders[i].address.firstName %>
                                                        <%= allOrders[i].address.lastName %>
                                                        <br>
                                                        <%= allOrders[i].address.addressLine2 %>,
                                                        <%= allOrders[i].address.street %>,
                                                        <%= allOrders[i].address.city %>
                                                         <br>
                                                        <%= allOrders[i].address.state %>
                                                        <%= allOrders[i].address.country %>
                                                        <%= allOrders[i].address.zipCode %>


                                                        <%= allOrders[i].address.deliveryemail %>
                                                        <%= allOrders[i].address.phone %>
                                                    </td>
                                                    <td class="align-middle">₹<%= allOrders[i].totalPrice %>
                                                    </td>
                                                    <td class="align-middle">
                                                        <ul class="list-unstyled">
                                                            <% for (let j=0; j < allOrders[i].products.length; j++) { %>
                                                                <li style="margin: 15px;">
                                                                    <%= allOrders[i].products[j].productName %> &nbsp;
                                                                        <span style="font-weight: 800;">X<%=
                                                                                allOrders[i].products[j].quantity %>
                                                                                </span>
                                                                </li>
                                                                <% } %>
                                                        </ul>
                                                    </td>
                                                    <td class="align-middle">
                                                        <ul class="list-unstyled">
                                                            <% for (let j=0; j < allOrders[i].products.length; j++) { %>
                                                                <li>
                                                                    <span class="badge rounded-pill alert-warning"
                                                                        style="font-size: 14px; margin: 6px;">
                                                                        <%= allOrders[i].products[j].productStatus
                                                                            %>
                                                                    </span>
                                                                </li>
                                                                <% } %>
                                                        </ul>
                                                    </td>
                                                    <td class="align-middle">
                                                        <ul class="list-unstyled">
                                                            <% for (let j=0; j < allOrders[i].products.length; j++) { %>
                                                                <li style="margin: 10px;">

                                                                    <div class="dropdown">
                                                                        <a href="#" data-bs-toggle="dropdown"
                                                                            class="btn btn-light rounded btn-sm font-sm">
                                                                            Change Status
                                                                        </a>
                                                                        <div class="dropdown-menu">
                                                                            <a class="dropdown-item"
                                                                                href="admin_change_order_status?orderId=<%= allOrders[i]._id %>&productId=<%=allOrders[i].products[j]._id %>&productStatus=Order Placed">Order
                                                                                Placed</a>
                                                                            <a class="dropdown-item"
                                                                                href="admin_change_order_status?orderId=<%= allOrders[i]._id %>&productId=<%=allOrders[i].products[j]._id %>&productStatus=Shipped">Shipped</a>
                                                                            <a class="dropdown-item"
                                                                                href="admin_change_order_status?orderId=<%= allOrders[i]._id %>&productId=<%=allOrders[i].products[j]._id %>&productStatus=Delivered">Delivered</a>
                                                                            <a class="dropdown-item"
                                                                                href="admin_change_order_status?orderId=<%= allOrders[i]._id %>&productId=<%=allOrders[i].products[j]._id %>&productStatus=Cancelled">Cancelled</a>
                                                                            <a class="dropdown-item"
                                                                                href="admin_change_order_status?orderId=<%= allOrders[i]._id %>&productId=<%=allOrders[i].products[j]._id %>&productStatus=Returned">Returned</a>
                                                                        </div>
                                                                    </div>
                                                                </li>
                                                                <% } %>
                                                        </ul>
                                                    </td>
                                                    <td class="align-middle">
                                                        <a href="/admin/individualOrdersPage?ordersIndividualId=<%= allOrders[i]._id %>"
                                                            class="btn btn-md rounded font-sm">Order Details</a>
                                                    </td>
                                                </tr>
                                                <% } %>
                                                    <% } else { %>
                                                        <tr>
                                                            <td colspan="9" class="text-center"
                                                                style="font-size: 25px;">No
                                                                orders available.</td>
                                                        </tr>
                                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div> <!-- card-body end// -->
                        <style>
                            .even-row {
                                background-color: #e0e0e0;
                                /* Light gray shade */
                            }

                            .odd-row {
                                background-color: #fff8f8;
                                /* White background */
                            }
                        </style>
                        <div class="pagination-area mt-15 mb-50" style="margin-left: 20px;">
                            <nav aria-label="Page navigation example">
                                <ul class="pagination justify-content-start">

                                    <li class="page-item <%= ordersListCurrentPage === 1 ? 'disabled' : '' %>">
                                        <a class="page-link" href="?ordersListPage=<%= ordersListCurrentPage - 1 %>">
                                            <i class="material-icons md-chevron_left"></i>
                                        </a>
                                    </li>

                                    <% for (let j=1; j <=ordersListTotalPages; j++) { %>
                                        <li class="page-item <%= j === ordersListCurrentPage ? 'active' : '' %>">
                                            <a class="page-link"
                                                href="?ordersListPage=<%= j %>&ordersListSearch=<%= ordersListSearch %>">
                                                <%= j %>
                                            </a>
                                        </li>
                                        <% } %>

                                        <li class="page-item <%= ordersListCurrentPage === ordersListTotalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?ordersListPage=<%= ordersListCurrentPage + 1 %>">
                                                <i class="material-icons md-chevron_right"></i>
                                            </a>
                                        </li>

                                </ul>
                            </nav>
                        </div>
                </section>

                
                <%- include("../layouts/admin_layouts/admin_footer.ejs") -%>
                
                
 ///////////////////////////////////////////////////////////////
search filter

 <div class="row gx-3">

                                <form id="ordersFilterForm" action="/admin/admin_orders_list" method="get"
                                    class="d-flex justify-content-between align-items-center">

                                    <div class="col-md-3 col-12 mb-md-0 mb-3">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Search term"
                                                name="ordersListSearch" value="<%= ordersListSearch ? ordersListSearch : '' %>">
                                            <select id="orderStatusFilter" class="form-select" name="orderStatus">
                                                <option value="">Search status</option>
                                                <option value="Order Placed" <%= orderStatus === 'Order Placed' ? 'selected' : '' %>>Order Placed</option>
                                                <option value="Shipped" <%= orderStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                <option value="Returned" <%= orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                                            </select>
                                            <button type="submit" class="btn btn-light bg">
                                                <i class="material-icons md-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                    

                                </form>

                            </div>

//////////////////////////////////////////





// user route 


user_route.get('/', userAuth.isLogout, userController.loginLoad)
user_route.post('/', userAuth.isLogout, userController.verifyLogin)

user_route.get('/login', userAuth.isLogout, userController.loginLoad)
user_route.post('/login', userAuth.isLogout, userController.verifyLogin)

user_route.get('/register', userAuth.isLogout, userController.registerLoad)
user_route.post('/register', upload.single('image'), userAuth.isLogout, userController.insertUser)

// registration
// user_route.get('/register', userAuth.isLogout, userController.registerLoad);
// user_route.post('/register', userAuth.isLogout, userController.insertUser);
// user_route.post('/verifyotp', userAuth.isLogout, userController.verifyOtp);
// user_route.post('/resendotp', userAuth.isLogout, userController.resendOtp);


user_route.get('/user_home', userAuth.isLogin, userController.userHome)



////////////////////////////////////////////////////




//register load
const registerLoad = async (req, res) => {
    try {
        res.render('register')
    } catch (error) {
        console.log("registerLoad err :" + error.message);

    }
}
//insert user
const insertUser = async (req, res) => {
    try {


        const spassword = await securePassword(req.body.password)

        const user = new User({
            username: req.body.username,
            email: req.body.email,
            mobile: req.body.mobile,
            image: req.file ? req.file.filename : "",
            password: spassword,
            is_admin: 0,
        })

        const userData = await user.save()

        if (userData) {
            res.render('register', { message: 'Your Registration has been done Successfully !' })
            console.log('Your Registration has been done Successfully !');
        }
        else {
            res.render('register', { message: 'Your Registration has been Failed !!!' })
            console.log('Your Registration has been Failed !!!');
        }
    } catch (error) {
        console.log('insertUser err :' + error.message);
    }
}



/////////////////////////////////////////////////////


//admin_edit_product
const admin_edit_product = async (req, res) => {
    try {

        const updateData = {
            productName: req.body.productName,
            model: req.body.model,
            brand: req.body.brand,
            scale: req.body.scale,
            colour: req.body.colour,
            description: req.body.description,
            quantity: req.body.quantity,
            regularPrice: req.body.regularPrice,
            salesPrice: req.body.salesPrice,
            category: req.body.category,

        };

        if (req.files && req.files.length > 0 ) {
            const imagePaths = req.files.map((file) => file.path);

            // Create a new folder for processed images
            const processedImagesFolder = './public/product_images/';
            if (!fs.existsSync(processedImagesFolder)) {
                fs.mkdirSync(processedImagesFolder, { recursive: true });
            }

            // Process and crop images using sharp
            const processedImages = await Promise.all(imagePaths.map(async (imagePath, index) => {
                const uniqueIdentifier = Date.now() + index;

                // Update the outputPath to include the processedImagesFolder
                const outputPath = `${processedImagesFolder}${uniqueIdentifier}_cropped.jpg`;

                await sharp(imagePath)
                    .resize(750, 500)
                    .toFile(outputPath);

                return outputPath;
            }));


            updateData.productImages = processedImages;
        }


        await Product.findByIdAndUpdate(req.query.id, { $set: updateData });

        console.log('Product Edited Successfully!');

        res.redirect('/admin/admin_products_list');

    } catch (error) {

        console.log("Error in admin_edit_product: ", error.message);
        res.redirect('/admin/admin_products_list');
    }
};




////////////////////////////////////////////////////





//user_shop_page
const user_shop_page = async (req, res) => {
    try {
        const userData = req.session.user_id
        const categoriesData = await Category.find({ isActive: true }).sort({ categoryName: 1 });
        // const productsData = await Product.find({ isActive: true })
        let cart = await Cart.findOne({ userId: userData }).populate(
            'products.productId'
          );
        if (!cart) {
            cart = new Cart({ userId: userData, products: [] });
        }

        let categoryName = req.query.categoryName || 'All Brands'
        let sort = req.query.sort || 'Featured'
        let searchQuery = req.query.searchQuery || '';

        console.log(`cat: ${categoryName} \n Search: ${searchQuery} \n sort: ${sort} `);

        let productsData;
        const searchFilter = searchQuery ? { $text: { $search: searchQuery } } : {};

        if (categoryName === 'All Brands') {

            switch (sort) {
                case 'Newest':
                    productsData = await Product.find({ isActive: true }).sort({ _id: -1 });
                    break;
                case 'In Stock<':
                    productsData = await Product.find({ isActive: true, quantity: { $gt: 0 } });
                    break;
                case 'Out Of Stock':
                    productsData = await Product.find({ isActive: true, quantity: { $lt: 1 } });
                    break;
                case 'Price: Low to High':
                    productsData = await Product.find({ isActive: true }).sort({ salesPrice: 1 });
                    break;
                case 'Price: High to Low':
                    productsData = await Product.find({ isActive: true }).sort({ salesPrice: -1 });
                    break;
                case 'A to Z':
                    productsData = await Product.find({ isActive: true }).sort({ productName: 1 });
                    break;
                case 'Z to A':
                    productsData = await Product.find({ isActive: true }).sort({ productName: -1 });
                    break;
                default:
                    productsData = await Product.find({ isActive: true });
                    break;
            }
        } else {
            switch (sort) {
                case 'Newest':
                    productsData = await Product.find({ isActive: true, category: categoryName }).sort({ _id: -1 });
                    break;
                case 'In Stock<':
                    productsData = await Product.find({ isActive: true, category: categoryName, quantity: { $gt: 0 } });
                    break;
                case 'Out Of Stock':
                    productsData = await Product.find({ isActive: true, category: categoryName, quantity: { $lt: 1 } });
                    break;
                case 'Price: Low to High':
                    productsData = await Product.find({ isActive: true, category: categoryName }).sort({ salesPrice: 1 });
                    break;
                case 'Price: High to Low':
                    productsData = await Product.find({ isActive: true, category: categoryName }).sort({ salesPrice: -1 });
                    break;
                case 'A to Z':
                    productsData = await Product.find({ isActive: true, category: categoryName }).sort({ productName: 1 });
                    break;
                case 'Z to A':
                    productsData = await Product.find({ isActive: true, category: categoryName }).sort({ productName: -1 });
                    break;
                default:
                    productsData = await Product.find({ isActive: true, category: categoryName });
                    break;
            }
        }

        res.render('user_shop_page', {
            products: productsData,
            categories: categoriesData,
            user : userData,
            selectedSort: sort,
            selectedCategory: categoryName,
            cart

        })

    } catch (error) {
        console.log('Error in user_shop_page :' + error.message);
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////

// category list navbar

<div class="main-categori-wrap d-none d-lg-block">
                        <a class="categori-button-active" href="#">
                            <span class="fi-rs-apps"></span> Browse Categories
                        </a>
                        <div class="categori-dropdown-wrap categori-dropdown-active-large">
                            <ul>
                                <% if (categories && typeof categories !=='undefined' ) { %>

                                    <% for (let i=0; i < 7; i++) { %>
                                        <li>
                                            <a href="/user_shop_page?categoryName=<%= categories[i].categoryName %>"
                                                class="d-block p-2 ">
                                                <%= categories[i].categoryName %>
                                            </a>
                                        </li>
                                        <% } %>
                                            <% } %>
                                                <li>
                                                    <ul class="more_slide_open" style="display: none;">
                                                        <% if (categories && typeof categories !=='undefined' ) { %>

                                                            <% for (let i=7; i < categories.length; i++) { %>
                                                                <li>
                                                                    <a href="/user_shop_page?categoryName=<%= categories[i].categoryName %>"
                                                                        class="d-block p-2 ">
                                                                        <%= categories[i].categoryName %>
                                                                    </a>
                                                                </li>
                                                                <% } %>
                                                                    <% } %>
                                                                        
                                                    </ul>
                                                </li>
                            </ul>
                            <div class="more_categories">Show more...</div>
                        </div>
                    </div>

//////////////////////////////////

//  user_checkout_address section


<div class="col-md-6">
<div class="mb-25">
    <h4>Select from saved addresses</h4>
</div>


<style>
    .address-card {
        cursor: pointer;
        transition: box-shadow 0.3s ease;
        text-align: center;
    }

    .address-card.selected {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .address-card .card-header {
        background-color: #088178;
        color: white;
        padding: 10px;
    }

    .address-card .card-body {
        padding: 15px;
    }

    .form-check-input {
        transform: scale(2);
        margin-top: 10px;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const addressCards = document.querySelectorAll(".address-card");

        addressCards.forEach(function (card, index) {
            card.addEventListener("click", function () {
                addressCards.forEach(function (card) {
                    card.classList.remove("selected");
                });
                card.classList.add("selected");
            });
        });
    });
</script>

<div class="row" style="width: 100%; display: flex; flex-wrap: wrap; gap: 20px;">

    <% if (user && user.address && user.address.length> 0) { %>
        <% for (let i=0; i < user.address.length; i++) { %>
            <div class="col-lg-6" style="flex: 0 0 48%; margin-bottom: 10px;">
                <div class="address-card">
                    <div class="card mb-3 mb-lg-0">
                        <div class="card-header">
                            <h5 class="mb-0" style="color: white;">
                                <%= i===0 ? 'Permanent Address' : 'Address ' + (i) %>
                            </h5>
                        </div>
                        <div class="card-body">
                            <address>
                                <%= user.address[i].firstName %>
                                    <%= user.address[i].lastName %><br>
                                        <%= user.address[i].street %>,
                                            <%= user.address[i].city %>,
                                                <%= user.address[i].state %>
                                                    <%= user.address[i].zipCode %>
                                                        <br>
                                                        <%= user.address[i].country %>
                            </address>

                            <input type="hidden" name="usernameRazorPay"
                                value="<%= user.address[i].firstName %> <%= user.address[i].lastName %>">
                            <input type="hidden" name="deliveryemailRazorPay"
                                value="<%= user.address[i].deliveryemail %>">
                            <input type="hidden" name="phoneRazorPay"
                                value=" +91<%= user.address[i].phone %>">

                            <p>
                                <%= user.address[i].phone %>
                            </p>
                            <p>
                                <%= user.address[i].deliveryemail %>
                            </p>
                            <input class="form-check-input" required="" type="radio"
                                name="address_selection" id="<%= i %>" value="<%= i %>">
                        </div>
                    </div>
                </div>
            </div>


            <% } %>
                <% } else { %>
                    <h3>
                        No addresses found. <br>
                        Please add a new address to place the order<br><br>

                    </h3>
                    <% } %>
</div>

<a href="/user_add_address_form" class="btn">Add new address</a>



</div>

//////////////////////////////////////////////////////////////////////

//  </h3>checkout page adddress new


<div class="col-md-6">
<div class="mb-25">
    <h4>Select from saved addresses</h4>
</div>

<style>
    /* General form styling */
    .form-select {
        width: 100%;
        padding: 12px;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-select:focus {
        border-color: #088178;
        outline: none;
        box-shadow: 0 0 8px rgba(8, 129, 120, 0.5);
    }

    .form-select option {
        padding: 8px;
    }

    /* Address details display */
    .address-info {
        font-size: 14px;
        color: #555;
        margin-top: 20px;
        background-color: #f1f1f1;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .address-info h5 {
        font-size: 16px;
        margin-bottom: 10px;
        color: #333;
    }

    .address-info p {
        margin: 4px 0;
        color: #555;
    }

    .no-address {
        font-size: 14px;
        color: #888;
    }

    /* Add address button styling */
    .btn {
        display: inline-block;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #088178;
        color: white;
        text-decoration: none;
        font-size: 14px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .btn:hover {
        background-color: #066a62;
    }

    /* Responsive behavior for smaller screens */
    @media (max-width: 768px) {
        .form-select {
            padding: 10px;
        }
        .address-info {
            padding: 12px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const addressSelect = document.getElementById("address-select");

        // Display address info when selection changes
        addressSelect.addEventListener("change", function () {
            const selectedIndex = addressSelect.selectedIndex;
            const selectedOption = addressSelect.options[selectedIndex];

            const addressInfo = document.getElementById("address-info");
            if (selectedIndex !== 0) {
                addressInfo.innerHTML = selectedOption.getAttribute("data-address");
            } else {
                addressInfo.innerHTML = "<span class='no-address'>Please select an address.</span>";
            }
        });
    });
</script>

<div class="form-group">
    <label for="address-select" style="font-size: 16px; font-weight: bold; color: #333;">Choose an Address</label>
    <select class="form-select" id="address-select" name="address_selection" required>
        <option value="" disabled selected>Select an address</option>
        <% if (user && user.address && user.address.length > 0) { %>
            <% user.address.forEach((address, i) => { %>
                <option value="<%= i %>" 
                    data-address="<%= address.firstName %> <%= address.lastName %><br>
                                  <%= address.street %>, <%= address.city %> <br>
                                   <%= address.state %> <%= address.zipCode %><br>
                                  <%= address.country %><br>
                                  <%= address.phone %><br>
                                  <%= address.deliveryemail %>">
                    Address <%= i + 1 %> - <%= address.firstName %> <%= address.lastName %>
                </option>
            <% }) %>
        <% } else { %>
            <option value="" disabled>No addresses found. Please add one.</option>
        <% } %>
    </select>
</div>

<div class="mt-3" id="address-info">
    <span class="no-address">Please select an address.</span>
</div>

<a href="/user_add_address_form" class="btn">Add new address</a>
</div>

/////////////////////////////////////////////////////////////////

// user_checkout_ coupons_ list

<div class="row">
                        <div class="col-lg-6 available-coupons">
                            <h5>Available Coupons:</h5>
                            <ul>
                                <% if (coupons && coupons.length> 0) { %>
                                    <% coupons.forEach(coupon=> { %>
                                        <li><strong>
                                                <%= coupon.couponCode %>
                                            </strong> - <%= coupon.discountPercentage %>
                                        </li>
                                        <% }) %>
                                            <% } else { %>
                                                <li>No coupons available at the moment.</li>
                                                <% } %>
                            </ul>
                        </div>

                        <div class="col-lg-6">
                            <div class="toggle_info">
                                <span><i class="fi-rs-label mr-10"></i><span class="text-muted">Have a coupon?</span> <a
                                        href="#coupon" data-bs-toggle="collapse" class="collapsed"
                                        aria-expanded="false">Click here to enter your code</a></span>
                            </div>
                            <div class="panel-collapse collapse coupon_form " id="coupon">
                                <div class="panel-body">
                                    <p class="mb-30 font-sm">If you have a coupon code, please apply it below.</p>
                                    <form method="post">
                                        <div class="form-group">
                                            <input type="text" placeholder="Enter Coupon Code...">
                                        </div>
                                        <div class="form-group">
                                            <button class="btn  btn-md" name="login">Apply Coupon</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                        
                    </div>

//////////////////////////////////////////////////////////////

// USER CHECKOUT PAGE SUB TOTAL rows

<tr>

                                                                    <% totalSum=0; if (productData.length> 0) {
                                                                        for (let i = 0; i < productData.length; i++) {
                                                                            const product=productData[i]; totalSum
                                                                            +=product.productId.salesPrice *
                                                                            product.quantity; } } %>
                                                                            <input type="hidden" name="priceChecking"
                                                                                value="<%= totalSum %>">

                                                                            <th>SubTotal</th>
                                                                            <td class="product-subtotal" colspan="2">₹
                                                                                <%= totalSum %>
                                                                            </td>
                                                                </tr>
                                                                <tr>
                                                                    <th>Shipping</th>
                                                                    <td colspan="2"><em>Free Shipping</em></td>
                                                                </tr>
                                                                <tr>
                                                                    <th>Total</th>
                                                                    <td colspan="2" class="product-subtotal">
                                                                        <span class="font-xl text-brand fw-900">
                                                                            ₹ <%= totalSum %>
                                                                        </span>
                                                                    </td>
                                                                </tr>

/////////////////////////////////////////////////////////////

// user_apply_coupon
const user_apply_coupon = async (req, res) => {
  try {
    console.log('USER APPLY COUPON');

    const userData = await User.findById({ _id: req.session.user_id })
    if (!userData){
      console.log('USER APPLY COUPON FUNCION');
      throw new Error("User not logged in.");
    } 

    // Retrieve or create cart
    let cart = await Cart.findOne({ userId: userData }).populate('products.productId');
    if (!cart) {
      cart = new Cart({ userData, products: [] });
      await cart.save();
      cart = await Cart.findOne({ userData }).populate('products.productId');
    }

    const enteredCoupon = req.query.enteredCoupon;
    const priceChecking = req.query.priceChecking;
    const couponsData = await Coupon.find({ isDeleted: false });
    const categories = await Category.find({ isActive: true })


    // Check if the coupon exists
    const couponData = await Coupon.findOne({ couponCode: enteredCoupon });
    if (!couponData) {
      console.log('USER APPLY COUPON FUNCION 0');

      return res.render('user_checkout', {
        productData: cart.products,
        user: userData,
        coupons: couponsData,
        cart,
        categories,
        message: "Coupon is not valid"
      });
    }

    // Extract coupon details
    const { couponCode, discountPercentage, minimumAmount, isActive, maxUsesPerUser, maximumAmount } = couponData;

    // Check redemption limit per user
    const redemptionCount = await Coupon.countDocuments({ "redemptionHistory.userId": userData, couponCode });
    if (redemptionCount >= maxUsesPerUser) {
      console.log('USER APPLY COUPON FUNCION 1');

      return res.render('user_checkout', {
        productData: cart.products,
        user: userData,
        coupons: couponsData,
        cart,
        categories,
        message: "Coupon usage limit exceeded (Already applied earlier)"
      });
    }

    // Check minimum amount condition
    if (priceChecking < minimumAmount) {
      const additionalAmountNeeded = minimumAmount - priceChecking;
      console.log('USER APPLY COUPON FUNCION 2');

      return res.render('user_checkout', {
        productData: cart.products,
        user: userData,
        coupons: couponsData,
        cart,
        categories,
        message: `Add more products worth Rs.${additionalAmountNeeded} more to apply coupon`
      });
    }

    // Apply the coupon if it's active
    if (isActive) {
      console.log('USER APPLY COUPON FUNCION 3');

      return res.render('user_checkout', {
        productData: cart.products,
        user: userData,
        coupons: couponsData,
        cart,
        categories,
        couponsData,
        couponCode,
        discountPercentage,
        minimumAmount,
        maximumAmount,
        message: "Coupon applied successfully"
      });
    } else {
      console.log('USER APPLY COUPON FUNCION 4');

      return res.render('user_checkout', {
        productData: cart.products,
        user: userData,
        coupons: couponsData,
        cart,
        categories,
        message: "Coupon expired or invalid"
      });
    }

  }  catch (error) {
    console.log("Error in user_apply_coupon : ", error.message);

  }
}

////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////  IMAGE CROPPING

if (req.file) {
            const imagePath = req.file.path;

            const inpath = './public/productImages/productOfferImages/'
            if (!fs.existsSync(inpath)) {
                fs.mkdirSync(inpath, { recursive: true });
            }
            const processedImagePath = `${inpath}${Date.now()}_cropped.jpg`;

            await sharp(imagePath)
                .resize({ width: 1000, height: 500, fit: 'cover' })
                .toFile(processedImagePath);

            productToUpdate.productOfferImage = processedImagePath;
        }


/////////////////////////////////////////////////////////////

// USER HOME PAGE CATEGORY IMAGE LISITING
<section class="popular-categories section-padding mt-15 mb-25">
                <div class="container wow fadeIn animated">
                    <h3 class="section-title mb-20"><span>Popular</span> Categories</h3>
                    <div class="carausel-6-columns-cover position-relative">
                        <div class="slider-arrow slider-arrow-2 carausel-6-columns-arrow"
                            id="carausel-6-columns-arrows"></div>
                        <div class="carausel-6-columns" id="carausel-6-columns">

                            <% if (categories && typeof categories !=='undefined' ) { %>
                                <% for (let i=0; i < categories.length; i++) { %>

                                    <div class="card-1">
                                        <figure class=" img-hover-scale overflow-hidden">
                                            <a href="/user_shop_page?categoryName=<%= categories[i].categoryName %>">
                                                <img src="../public/category_images/<%= categories[i].categoryImages %>"
                                                    alt=""> </a>
                                        </figure>
                                        <h5> <a href="/user_shop_page?categoryName=<%= categories[i].categoryName %>">
                                                <%= categories[i].categoryName %>
                                            </a> </h5>
                                    </div>

                                    <% } %>
                                        <% } %>

                        </div>
                    </div>
                </div>
            </section>

/////////////////////////////////////////////////////////////////////////////

//  CHECKOUT PAGE FINAL TOTAL CALCULATE

<tr>
<th>Total</th>
<td colspan="2"
    class="product-subtotal">
    <span
        class="font-xl text-brand fw-900">₹
        <%= totalSum -
            finalDiscountAmount
            %>
    </span>
</td>
</tr>

//////////////////////////////////////////////////////

// CHECKOU PAGE WALLET PLAIN

<div class="custome-radio">
<input class="form-check-input" required type="radio"
    name="payment_option" id="payment_option_Wallet" value="Wallet">
<label class="form-check-label"
    for="payment_option_Wallet">Wallet</label>
</div>

///////////////////////////////////////

// USER ORDER CANCELL Process 

/ cancel order
const user_cancel_order = async (req, res) => {
    try {
        console.log("order is cancelling.....");

        const userData = await User.findById({ _id: req.session.user_id })
        const userId = userData._id
        const username = userData.username

        const reason = req.body.reason;
        const productId = req.body.productId;
        const cancelOrderId = req.body.cancelOrderId;

        const orderData = await Order.find({ orderid: cancelOrderId });
        ordersData[0].products[j].price /ordersData[0].products[j].quantity
        const refundedAmount= orderData.


        const updatedOrder = await Order.findOneAndUpdate(
            {
                orderid: cancelOrderId,
                'products._id': productId
            },
            {
                $set: {
                    'products.$.productCancelReason': reason,
                    'products.$.productCancelDate': new Date(),
                    'products.$.productPaymentStatus': 'Refunded',
                    'products.$.productStatus': 'Cancelled',
                    'products.$.refundedAmount':refundedAmount ,

                },
            },
            { new: true }
        );

        const updatedOrder2 = await Order.findOneAndUpdate(
            {
                orderid: cancelOrderId,
            },
            {
                $set: {
                    orderStatus: 'Multiple Statuses'
                },
            },
            { new: true }
        );

        // product quantity update
        const productDetails = updatedOrder.products.find(product => product._id == productId);
        if (productDetails) {
            await Product.findByIdAndUpdate(productId, {
                $inc: { quantity: productDetails.quantity },
            });

            console.log("order is CANCELLED");

        }

        const userDatas = await User.findById(userId)
        const categories = await Category.find({ isActive: true });
        const productsData = await Product.find({ isActive: true });
        const ordersData = await Order.find({ userId: userDatas._id });
        let cart = await Cart.findOne({ userId: userData }).populate(
            'products.productId'
        );
        if (!cart) {
            cart = new Cart({ userId: userData, products: [] });
        }

        res.render('user_account', {
            message: `Order cancelled successfully. `,
            user: userDatas,
            categories,
            productsData,
            ordersData,
            cart,
            username
        });


    } catch (error) {
        console.log('Error in user_cancel_order:', error.message);
        res.status(500).send('Internal Server Error');


    }
}

////////////////////////////////////////////////////

ADMIN TRANSACTIONS EXCEL EXPORT
// Excel Export function
                    function exportToExcel() {
                        console.log("Exporting to Excel...");

                        if (window.jspdf) {
                            console.log("EXCEL : jsPDF is loaded!");
                        } else {
                            console.log("EXCEL : jsPDF is not loaded!");
                        }


                        const visibleRows = table.rows({ filter: 'applied' }).data().toArray();
                        if (visibleRows.length === 0) {
                            alert('No data to export');
                            return;
                        }

                        const wb = XLSX.utils.book_new();
                        const headers = ['Order ID', 'Billing Name', 'Date', 'Order Amount', 'Discount %', 'Total', 'Payment Status', 'Payment Method', 'View Details'];
                        const ws = XLSX.utils.aoa_to_sheet([headers, ...visibleRows]);
                        XLSX.utils.book_append_sheet(wb, ws, "Filtered Data");
                        XLSX.writeFile(wb, 'filtered_transactions.xlsx');
                    }


/////////////////////////////     

ADMIN TRANSACTIONS EXCEL EXPORT 2
 
// Excel Export function
                    function exportToExcel() {
                        console.log("Exporting to Excel...");

                        // Get only the visible rows after the filter is applied
                        const visibleRows = table.rows({ filter: 'applied' }).data().toArray();

                        // Create a new workbook with the filtered data
                        const wb = XLSX.utils.book_new();

                        // Prepare the headers
                        const headers = ['Order ID', 'Billing Name', 'Date', 'Order Amount', 'Discount %', 'Total', 'Payment Status', 'Payment Method'];

                        // Helper function to clean HTML tags from a string
                        function stripHtml(html) {
                            const doc = new DOMParser().parseFromString(html, 'text/html');
                            return doc.body.textContent || "";
                        }

                        // Clean the data by stripping HTML tags from each cell
                        const cleanedRows = visibleRows.map(row => row.map(cell => stripHtml(cell)));

                        // Add the filtered data with headers
                        const ws = XLSX.utils.aoa_to_sheet([headers, ...cleanedRows]);

                        // Append the sheet to the workbook
                        XLSX.utils.book_append_sheet(wb, ws, "Filtered Data");

                        // Save the workbook
                        XLSX.writeFile(wb, 'filtered_transactions.xlsx');
                    }
/////////////////////////////////////

// Function to fetch and display the total stats

                    function fetchOrderStats() {
                        fetch('/api/order-stats')
                            .then(response => response.json())
                            .then(data => {
                                // Update the frontend div with the data from the backend
                                document.getElementById('total-sales-count').innerText = data.totalSalesCount;
                                document.getElementById('total-orders-amount').innerText = `₹${data.totalOrdersAmount.toFixed(2)}`;
                                document.getElementById('total-discount-amount').innerText = `₹${data.totalDiscountAmount.toFixed(2)}`;
                            })
                            .catch(error => {
                                console.error('Error fetching order stats:', error);
                            });
                    }

                    // Call the function to update stats when the page loads
                    fetchOrderStats();

//////////////////////////////////////////////////////

// USER CHECKOUT CATEGORY OFFER section

            
<% let finalTotal = totalSum - finalDiscountAmount;
        console.log(`without_final_: ${finalTotal}` );
        
        productData.forEach(function(product) {
          
          console.log(`category_is_: ${product.productId.category}`);


          let productCategory = categories.find(function(category) {
            return category.categoryName === product.productId.category;
          });
          
          if (productCategory && productCategory.isCategoryOfferActive) {

            console.log(`got_it_yeaa`);
            console.log(`productCategory_is_:  ${productCategory}`);

            let categoryDiscount = Math.round(product.productId.salesPrice * product.quantity * (productCategory.categoryOfferPercentage / 100))  

            
            console.log(`categoryOfferPercentage is_: ${productCategory.categoryOfferPercentage} categoryDiscount_is_: ${categoryDiscount}` );
            
            finalTotal -= categoryDiscount;
            %>


            <tr>
  <th>Category Offer</th>
  <td>
            <%= product.productId.category %> : <%= productCategory.categoryOfferPercentage %>% Off
     </td>
     <td colspan="2">
     - ₹<%= categoryDiscount %> 
      </td>
</tr>
<% }else{
            console.log(`not got`);
                      }
        });
        console.log(`finaltotal_is_:  ${finalTotal}`);
                %>
        <tr><th>Total</th><td  colspan="2"  > <span class="font-xl text-brand fw-900"> ₹ <%= finalTotal %>
</span> </td></tr>
<input type="hidden" name="allSubtotal"
                                                                                    id="allSubtotal" 
                                                                                    value="<%= finalTotal %>">
                                            
                                            
                                            
                                                                                    </tbody>
                                        </table>
                                    </div>



///////////////////////////////////////////////////////

//  USER REFERRAL CODE COPYING
<% if(user.referralCode){ %>
    <div class="card-body">
      Share your referral code with your friends, and
      both of you will get ₹100 added to the wallet.

      <div class="card-header">
        <h4>
          Referral Code:
          <span id="referralCode"><%=user.referralCode %></span>
        </h4>
      </div>

      <button class="hover-up" style="color: white;  border-radius: 10px;  background-color: black;  margin-top: 5px;" id="copyButton">Copy to Clipboard</button>

      <script>
        function showToast(message, type = "info") {
          Toastify({
            text: message,
            duration: 3000, // Time in milliseconds
            gravity: "top", // Position: top or bottom
            position: "right", // Position: left, center or right
            backgroundColor: type === "success" ? "green" : type === "error" ? "red" : "blue",
            close: true
          }).showToast();
        }
      </script>


      <script>
        
        document.getElementById('copyButton').addEventListener('click', () => {
          const referralCodeElement = document.getElementById('referralCode');
          console.log(`referralCodeElement_is_:_${referralCodeElement.textContent}`);
          
          const referralCodeData = `Welcome to DIECASTCARZ! The complete miniature cars shop.
           Create an account on www.diecastcarz.in using the referral code: "${referralCodeElement.innerText}", and win Rs.200 as a WELCOME bonus !!!.`;

          // Create a temporary input element to facilitate copying
          const tempInput = document.createElement('input');
          tempInput.value = referralCodeData;
          document.body.appendChild(tempInput);

          // Select the text in the input element
          tempInput.select();
          document.execCommand('copy');

          // Remove the temporary input element
          document.body.removeChild(tempInput);

          showToast(`Referral code "${referralCodeElement.innerText}" has been copied to the clipboard.`, 'success');
        });

      </script>
    </div>

    ////////////////////////////////////////////////</div>

  //</div>  ADMIN EXPORT TO PDF

     // PDF Export function
     function exportToPDF() {
        console.log("Exporting to PDF...");
  
        // Show all data in the table by temporarily disabling pagination
        table.page.len(-1).draw();
  
        const element = document.getElementById('pdf-content');
        const options = {
          margin: 0.5,
          filename: 'transactions.pdf',
          image: {
            type: 'jpeg',
            quality: 0.98
          },
          html2canvas: {
            scale: 2,
            useCORS: true,
            scrollX: 0,
            scrollY: 0
          },
          jsPDF: {
            unit: 'in',
            format: 'a4',
            orientation: 'portrait'
          }
        };
  
        html2pdf().set(options).from(element).toPdf().get('pdf').then(function(pdf) {
          const totalPages = pdf.internal.getNumberOfPages();
          for (let i = 1; i <= totalPages; i++) {
            pdf.setPage(i);
            pdf.setFontSize(10);
            pdf.text('Page ' + i + ' of ' + totalPages, pdf.internal.pageSize.width - 1, pdf.internal.pageSize.height - 0.5);
          }
        }).save().finally(() => {
          // Restore original pagination settings after export
          table.page.len(10).draw();
        });
      }

      
      ////////////////////////////////////////////////////////////

      
  // current month
  <script>
  document.addEventListener("DOMContentLoaded", function() {
    // Fetch current month data
    fetch('/admin/admin_current_month_data')
      .then(response => response.json())
      .then(data => {
        console.log("admin_current_month_data received");

        var dailyOrderData = data.dailyOrderData || [];
        var dailyUserData = data.dailyUserData || [];

        // Extract data from the fetched JSON
        var orderLabels = dailyOrderData.map(order => `Day ${order._id}`);
        var orderData = dailyOrderData.map(order => order.totalDailyPrice);

        var userLabels = [' '];
        var userData = dailyUserData.length > 0 ? dailyUserData.map(user => user.userCount) : [];

        var ctx = document.getElementById('currentMonthChart').getContext('2d');
        var chart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: orderLabels.concat(userLabels),
            datasets: [{
                label: 'Daily Order Data',
                data: orderData,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
              },
              {
                label: 'Daily User Data',
                data: userData,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
              }
            ]
          },
          options: {
            plugins: {
              title: {
                display: true,
                text: data.currentMonth || "Current Month Data"
              }
            },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      })
      .catch(error => console.error('Error fetching data:', error));

    // Helper function to format day labels (if needed)
    function getDayName(day) {
      return `Day ${day}`;
    }
  });
</script>

///////////////////////////////////////////////

// USER HOME NEW ARRIVALS SCROLL LISTS

<% if (products.length> 0) {
    products.sort((a, b) => (b._id > a._id ? 1 : -1));
     for (let i = 0; i < 10; i++) { %>
<div class="product-cart-wrap small hover-up">
<div class="product-img-action-wrap">
<div class="product-img product-img-zoom">
<% if (products[i].productImages && products[i].productImages.length> 0) { %>
<a href="user_product_page?id=<%= products[i]._id %>">
 <img class="default-img" src="/<%= products[i].productImages[0] %>" alt="">
 <img class="hover-img" src="/<%= products[i].productImages[1] %>" alt="">
</a>
<% } else { %>
No Image
<% } %>
</div>
<div class="product-action-1">
<a aria-label="Add To Wishlist" class="action-btn hover-up" onclick="addToWishlist('<%= products[i]._id %>','<%= products[i].productName %>' )" href="#"><i class="fi-rs-heart"></i></a>
<a aria-label="Add To Cart" class="action-btn hover-up" onclick="addToCart('<%= products[i]._id %>','<%= products[i].productName %>' ); changeIcon(this)" href="#"><i class="fi-rs-shopping-bag-add"></i></a>

</div>
<div class="product-badges product-badges-position product-badges-mrg">
<span class="hot">New</span>
</div>
</div>
<div class="product-content-wrap">

<div style="min-height: 100%">
<a href="user_product_page?id=<%= products[i]._id %>" style="color: black;">
 <%= products[i].productName %>
</a>
<br>
<a href="/user_shop_page?categoryName=<%= products[i].category %>">
 <%= products[i].category %>
</a>
</div>

<div class="product-price">
<span>₹<%= products[i].salesPrice %></span>
<span class="old-price">₹<%= products[i].regularPrice %></span>
</div>
</div>
</div>
<% } } else { %>
<tr>
<td colspan="5">Products data not found</td>
</tr>
<% } %>

////////////////////////////////////////////////